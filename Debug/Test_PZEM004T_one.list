
Test_PZEM004T_one.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033fc  080033fc  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080033fc  080033fc  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033fc  080033fc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000090  08003494  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003494  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ae  00000000  00000000  000280e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00029698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbbd  00000000  00000000  0002a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009274  00000000  00000000  00039e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d2f9  00000000  00000000  00043101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a03fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f8  00000000  00000000  000a044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032cc 	.word	0x080032cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	080032cc 	.word	0x080032cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46de      	mov	lr, fp
 8000248:	4657      	mov	r7, sl
 800024a:	464e      	mov	r6, r9
 800024c:	4645      	mov	r5, r8
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	b0a9      	sub	sp, #164	; 0xa4
 8000252:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fd6e 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 fa78 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 fb38 	bl	80008d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000260:	f000 fad6 	bl	8000810 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000264:	f000 fb04 	bl	8000870 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Светодиод для теста
 8000268:	2390      	movs	r3, #144	; 0x90
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	2120      	movs	r1, #32
 800026e:	0018      	movs	r0, r3
 8000270:	f001 f86b 	bl	800134a <HAL_GPIO_TogglePin>
	  // Очистка переменных перед опросом
	  memset(V,0, sizeof(V));	memset(A,0, sizeof(A));		memset(W,0, sizeof(W));		memset(Wh,0, sizeof(Wh));
 8000274:	4b95      	ldr	r3, [pc, #596]	; (80004cc <main+0x288>)
 8000276:	220c      	movs	r2, #12
 8000278:	2100      	movs	r1, #0
 800027a:	0018      	movs	r0, r3
 800027c:	f002 fbb4 	bl	80029e8 <memset>
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <main+0x28c>)
 8000282:	220c      	movs	r2, #12
 8000284:	2100      	movs	r1, #0
 8000286:	0018      	movs	r0, r3
 8000288:	f002 fbae 	bl	80029e8 <memset>
 800028c:	4b91      	ldr	r3, [pc, #580]	; (80004d4 <main+0x290>)
 800028e:	220c      	movs	r2, #12
 8000290:	2100      	movs	r1, #0
 8000292:	0018      	movs	r0, r3
 8000294:	f002 fba8 	bl	80029e8 <memset>
 8000298:	4b8f      	ldr	r3, [pc, #572]	; (80004d8 <main+0x294>)
 800029a:	220c      	movs	r2, #12
 800029c:	2100      	movs	r1, #0
 800029e:	0018      	movs	r0, r3
 80002a0:	f002 fba2 	bl	80029e8 <memset>
	  // Запрашиваем данные
	  // Напряжение
	  for(uint8_t i = 0; i < 4; i++){
 80002a4:	2347      	movs	r3, #71	; 0x47
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
 80002ac:	e05b      	b.n	8000366 <main+0x122>
		  HAL_UART_Abort(UART_PZEM);
 80002ae:	4b8b      	ldr	r3, [pc, #556]	; (80004dc <main+0x298>)
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 ff79 	bl	80021a8 <HAL_UART_Abort>
		  cntUART(i);
 80002b6:	2347      	movs	r3, #71	; 0x47
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	0018      	movs	r0, r3
 80002be:	f000 fb97 	bl	80009f0 <cntUART>
		  if(HAL_UART_Transmit(UART_PZEM, (uint8_t *)sendVoltage, 7, 100) == HAL_OK){
 80002c2:	4987      	ldr	r1, [pc, #540]	; (80004e0 <main+0x29c>)
 80002c4:	4885      	ldr	r0, [pc, #532]	; (80004dc <main+0x298>)
 80002c6:	2364      	movs	r3, #100	; 0x64
 80002c8:	2207      	movs	r2, #7
 80002ca:	f001 fde7 	bl	8001e9c <HAL_UART_Transmit>
 80002ce:	1e03      	subs	r3, r0, #0
 80002d0:	d13a      	bne.n	8000348 <main+0x104>
			  if(HAL_UART_Receive(UART_PZEM, (uint8_t *)buf, 7, 100) == HAL_OK){
 80002d2:	4984      	ldr	r1, [pc, #528]	; (80004e4 <main+0x2a0>)
 80002d4:	4881      	ldr	r0, [pc, #516]	; (80004dc <main+0x298>)
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2207      	movs	r2, #7
 80002da:	f001 fe89 	bl	8001ff0 <HAL_UART_Receive>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d132      	bne.n	8000348 <main+0x104>
				  if(buf[1]+buf[2] == 160){
 80002e2:	4b80      	ldr	r3, [pc, #512]	; (80004e4 <main+0x2a0>)
 80002e4:	785b      	ldrb	r3, [r3, #1]
 80002e6:	001a      	movs	r2, r3
 80002e8:	4b7e      	ldr	r3, [pc, #504]	; (80004e4 <main+0x2a0>)
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	18d3      	adds	r3, r2, r3
 80002ee:	2ba0      	cmp	r3, #160	; 0xa0
 80002f0:	d103      	bne.n	80002fa <main+0xb6>
					  RESET_CPU; // Если сбился порядок ресет контроллера
 80002f2:	4b7d      	ldr	r3, [pc, #500]	; (80004e8 <main+0x2a4>)
 80002f4:	4a7d      	ldr	r2, [pc, #500]	; (80004ec <main+0x2a8>)
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	e026      	b.n	8000348 <main+0x104>
				  }else{
					  if(buf[0] == 0xA0){ V[i][0] = buf[1]; V[i][1] = buf[2]; V[i][2] = buf[3]; }
 80002fa:	4b7a      	ldr	r3, [pc, #488]	; (80004e4 <main+0x2a0>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2ba0      	cmp	r3, #160	; 0xa0
 8000300:	d122      	bne.n	8000348 <main+0x104>
 8000302:	2447      	movs	r4, #71	; 0x47
 8000304:	193b      	adds	r3, r7, r4
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	4b76      	ldr	r3, [pc, #472]	; (80004e4 <main+0x2a0>)
 800030a:	7858      	ldrb	r0, [r3, #1]
 800030c:	496f      	ldr	r1, [pc, #444]	; (80004cc <main+0x288>)
 800030e:	0013      	movs	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	189b      	adds	r3, r3, r2
 8000314:	1c02      	adds	r2, r0, #0
 8000316:	545a      	strb	r2, [r3, r1]
 8000318:	193b      	adds	r3, r7, r4
 800031a:	781a      	ldrb	r2, [r3, #0]
 800031c:	4b71      	ldr	r3, [pc, #452]	; (80004e4 <main+0x2a0>)
 800031e:	7898      	ldrb	r0, [r3, #2]
 8000320:	496a      	ldr	r1, [pc, #424]	; (80004cc <main+0x288>)
 8000322:	0013      	movs	r3, r2
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	189b      	adds	r3, r3, r2
 8000328:	18cb      	adds	r3, r1, r3
 800032a:	3301      	adds	r3, #1
 800032c:	1c02      	adds	r2, r0, #0
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	193b      	adds	r3, r7, r4
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	4b6b      	ldr	r3, [pc, #428]	; (80004e4 <main+0x2a0>)
 8000336:	78d8      	ldrb	r0, [r3, #3]
 8000338:	4964      	ldr	r1, [pc, #400]	; (80004cc <main+0x288>)
 800033a:	0013      	movs	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	189b      	adds	r3, r3, r2
 8000340:	18cb      	adds	r3, r1, r3
 8000342:	3302      	adds	r3, #2
 8000344:	1c02      	adds	r2, r0, #0
 8000346:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }
		  memset(buf,0,7);
 8000348:	4b66      	ldr	r3, [pc, #408]	; (80004e4 <main+0x2a0>)
 800034a:	2207      	movs	r2, #7
 800034c:	2100      	movs	r1, #0
 800034e:	0018      	movs	r0, r3
 8000350:	f002 fb4a 	bl	80029e8 <memset>
		  HAL_Delay(100);
 8000354:	2064      	movs	r0, #100	; 0x64
 8000356:	f000 fd51 	bl	8000dfc <HAL_Delay>
	  for(uint8_t i = 0; i < 4; i++){
 800035a:	2147      	movs	r1, #71	; 0x47
 800035c:	187b      	adds	r3, r7, r1
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	187b      	adds	r3, r7, r1
 8000362:	3201      	adds	r2, #1
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	2347      	movs	r3, #71	; 0x47
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b03      	cmp	r3, #3
 800036e:	d99e      	bls.n	80002ae <main+0x6a>
	  }
	  HAL_Delay(1000);
 8000370:	23fa      	movs	r3, #250	; 0xfa
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fd41 	bl	8000dfc <HAL_Delay>
	  // Ток
	  for(uint8_t i = 0; i < 4; i++){
 800037a:	2346      	movs	r3, #70	; 0x46
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
 8000382:	e042      	b.n	800040a <main+0x1c6>
		  HAL_UART_Abort(UART_PZEM);
 8000384:	4b55      	ldr	r3, [pc, #340]	; (80004dc <main+0x298>)
 8000386:	0018      	movs	r0, r3
 8000388:	f001 ff0e 	bl	80021a8 <HAL_UART_Abort>
		  cntUART(i);
 800038c:	2446      	movs	r4, #70	; 0x46
 800038e:	193b      	adds	r3, r7, r4
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fb2c 	bl	80009f0 <cntUART>
		  if(HAL_UART_Transmit(UART_PZEM, (uint8_t *)sendCurrent, 7, 100) == HAL_OK){
 8000398:	4955      	ldr	r1, [pc, #340]	; (80004f0 <main+0x2ac>)
 800039a:	4850      	ldr	r0, [pc, #320]	; (80004dc <main+0x298>)
 800039c:	2364      	movs	r3, #100	; 0x64
 800039e:	2207      	movs	r2, #7
 80003a0:	f001 fd7c 	bl	8001e9c <HAL_UART_Transmit>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d121      	bne.n	80003ec <main+0x1a8>
			  if(HAL_UART_Receive(UART_PZEM, (uint8_t *)buf, 7, 100) == HAL_OK){
 80003a8:	494e      	ldr	r1, [pc, #312]	; (80004e4 <main+0x2a0>)
 80003aa:	484c      	ldr	r0, [pc, #304]	; (80004dc <main+0x298>)
 80003ac:	2364      	movs	r3, #100	; 0x64
 80003ae:	2207      	movs	r2, #7
 80003b0:	f001 fe1e 	bl	8001ff0 <HAL_UART_Receive>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d119      	bne.n	80003ec <main+0x1a8>
				  if(buf[0] == 0xA1){ A[i][0] = buf[2]; A[i][1] = buf[3]; }
 80003b8:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <main+0x2a0>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2ba1      	cmp	r3, #161	; 0xa1
 80003be:	d115      	bne.n	80003ec <main+0x1a8>
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	4b47      	ldr	r3, [pc, #284]	; (80004e4 <main+0x2a0>)
 80003c6:	7898      	ldrb	r0, [r3, #2]
 80003c8:	4941      	ldr	r1, [pc, #260]	; (80004d0 <main+0x28c>)
 80003ca:	0013      	movs	r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	189b      	adds	r3, r3, r2
 80003d0:	1c02      	adds	r2, r0, #0
 80003d2:	545a      	strb	r2, [r3, r1]
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	4b42      	ldr	r3, [pc, #264]	; (80004e4 <main+0x2a0>)
 80003da:	78d8      	ldrb	r0, [r3, #3]
 80003dc:	493c      	ldr	r1, [pc, #240]	; (80004d0 <main+0x28c>)
 80003de:	0013      	movs	r3, r2
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	189b      	adds	r3, r3, r2
 80003e4:	18cb      	adds	r3, r1, r3
 80003e6:	3301      	adds	r3, #1
 80003e8:	1c02      	adds	r2, r0, #0
 80003ea:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  memset(buf,0,7);
 80003ec:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <main+0x2a0>)
 80003ee:	2207      	movs	r2, #7
 80003f0:	2100      	movs	r1, #0
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 faf8 	bl	80029e8 <memset>
		  HAL_Delay(5);
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 fcff 	bl	8000dfc <HAL_Delay>
	  for(uint8_t i = 0; i < 4; i++){
 80003fe:	2146      	movs	r1, #70	; 0x46
 8000400:	187b      	adds	r3, r7, r1
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	187b      	adds	r3, r7, r1
 8000406:	3201      	adds	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	2346      	movs	r3, #70	; 0x46
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d9b7      	bls.n	8000384 <main+0x140>
	  }
	  HAL_Delay(1000);
 8000414:	23fa      	movs	r3, #250	; 0xfa
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fcef 	bl	8000dfc <HAL_Delay>
	  // Мощьность
	  for(uint8_t i = 0; i < 4; i++){
 800041e:	2345      	movs	r3, #69	; 0x45
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	e042      	b.n	80004ae <main+0x26a>
		  HAL_UART_Abort(UART_PZEM);
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <main+0x298>)
 800042a:	0018      	movs	r0, r3
 800042c:	f001 febc 	bl	80021a8 <HAL_UART_Abort>
		  cntUART(i);
 8000430:	2445      	movs	r4, #69	; 0x45
 8000432:	193b      	adds	r3, r7, r4
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fada 	bl	80009f0 <cntUART>
		  if(HAL_UART_Transmit(UART_PZEM, (uint8_t *)sendPower, 7, 100) == HAL_OK){
 800043c:	492d      	ldr	r1, [pc, #180]	; (80004f4 <main+0x2b0>)
 800043e:	4827      	ldr	r0, [pc, #156]	; (80004dc <main+0x298>)
 8000440:	2364      	movs	r3, #100	; 0x64
 8000442:	2207      	movs	r2, #7
 8000444:	f001 fd2a 	bl	8001e9c <HAL_UART_Transmit>
 8000448:	1e03      	subs	r3, r0, #0
 800044a:	d121      	bne.n	8000490 <main+0x24c>
			  if(HAL_UART_Receive(UART_PZEM, (uint8_t *)buf, 7, 100) == HAL_OK){
 800044c:	4925      	ldr	r1, [pc, #148]	; (80004e4 <main+0x2a0>)
 800044e:	4823      	ldr	r0, [pc, #140]	; (80004dc <main+0x298>)
 8000450:	2364      	movs	r3, #100	; 0x64
 8000452:	2207      	movs	r2, #7
 8000454:	f001 fdcc 	bl	8001ff0 <HAL_UART_Receive>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d119      	bne.n	8000490 <main+0x24c>
				if(buf[0] == 0xA2){ W[i][0] = buf[1]; W[i][1] = buf[2]; }
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <main+0x2a0>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2ba2      	cmp	r3, #162	; 0xa2
 8000462:	d115      	bne.n	8000490 <main+0x24c>
 8000464:	193b      	adds	r3, r7, r4
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <main+0x2a0>)
 800046a:	7858      	ldrb	r0, [r3, #1]
 800046c:	4919      	ldr	r1, [pc, #100]	; (80004d4 <main+0x290>)
 800046e:	0013      	movs	r3, r2
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	189b      	adds	r3, r3, r2
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	545a      	strb	r2, [r3, r1]
 8000478:	193b      	adds	r3, r7, r4
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <main+0x2a0>)
 800047e:	7898      	ldrb	r0, [r3, #2]
 8000480:	4914      	ldr	r1, [pc, #80]	; (80004d4 <main+0x290>)
 8000482:	0013      	movs	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	189b      	adds	r3, r3, r2
 8000488:	18cb      	adds	r3, r1, r3
 800048a:	3301      	adds	r3, #1
 800048c:	1c02      	adds	r2, r0, #0
 800048e:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  memset(buf,0,7);
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <main+0x2a0>)
 8000492:	2207      	movs	r2, #7
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f002 faa6 	bl	80029e8 <memset>
		  HAL_Delay(5);
 800049c:	2005      	movs	r0, #5
 800049e:	f000 fcad 	bl	8000dfc <HAL_Delay>
	  for(uint8_t i = 0; i < 4; i++){
 80004a2:	2145      	movs	r1, #69	; 0x45
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	3201      	adds	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	2345      	movs	r3, #69	; 0x45
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d9b7      	bls.n	8000428 <main+0x1e4>
	  }
  	  HAL_Delay(1000);
 80004b8:	23fa      	movs	r3, #250	; 0xfa
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fc9d 	bl	8000dfc <HAL_Delay>
	  // Потреб. мощьность
	  for(uint8_t i = 0; i < 4; i++){
 80004c2:	2344      	movs	r3, #68	; 0x44
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
 80004ca:	e064      	b.n	8000596 <main+0x352>
 80004cc:	2000024c 	.word	0x2000024c
 80004d0:	20000258 	.word	0x20000258
 80004d4:	20000264 	.word	0x20000264
 80004d8:	20000270 	.word	0x20000270
 80004dc:	200000ac 	.word	0x200000ac
 80004e0:	20000000 	.word	0x20000000
 80004e4:	2000027c 	.word	0x2000027c
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	05fa0004 	.word	0x05fa0004
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000010 	.word	0x20000010
	  		  HAL_UART_Abort(UART_PZEM);
 80004f8:	4b89      	ldr	r3, [pc, #548]	; (8000720 <main+0x4dc>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fe54 	bl	80021a8 <HAL_UART_Abort>
	  		  cntUART(i);
 8000500:	2444      	movs	r4, #68	; 0x44
 8000502:	193b      	adds	r3, r7, r4
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fa72 	bl	80009f0 <cntUART>
	  			  if(HAL_UART_Transmit(UART_PZEM, (uint8_t *)sendEnergy, 7, 100) == HAL_OK){
 800050c:	4985      	ldr	r1, [pc, #532]	; (8000724 <main+0x4e0>)
 800050e:	4884      	ldr	r0, [pc, #528]	; (8000720 <main+0x4dc>)
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	2207      	movs	r2, #7
 8000514:	f001 fcc2 	bl	8001e9c <HAL_UART_Transmit>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d12d      	bne.n	8000578 <main+0x334>
	  				  if(HAL_UART_Receive(UART_PZEM, (uint8_t *)buf, 7, 100) == HAL_OK){
 800051c:	4982      	ldr	r1, [pc, #520]	; (8000728 <main+0x4e4>)
 800051e:	4880      	ldr	r0, [pc, #512]	; (8000720 <main+0x4dc>)
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	2207      	movs	r2, #7
 8000524:	f001 fd64 	bl	8001ff0 <HAL_UART_Receive>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d125      	bne.n	8000578 <main+0x334>
	  					  if(buf[0] == 0xA3){ Wh[i][0] = buf[1]; Wh[i][1] = buf[2]; Wh[i][2] = buf[3]; }
 800052c:	4b7e      	ldr	r3, [pc, #504]	; (8000728 <main+0x4e4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2ba3      	cmp	r3, #163	; 0xa3
 8000532:	d121      	bne.n	8000578 <main+0x334>
 8000534:	193b      	adds	r3, r7, r4
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b7b      	ldr	r3, [pc, #492]	; (8000728 <main+0x4e4>)
 800053a:	7858      	ldrb	r0, [r3, #1]
 800053c:	497b      	ldr	r1, [pc, #492]	; (800072c <main+0x4e8>)
 800053e:	0013      	movs	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	189b      	adds	r3, r3, r2
 8000544:	1c02      	adds	r2, r0, #0
 8000546:	545a      	strb	r2, [r3, r1]
 8000548:	193b      	adds	r3, r7, r4
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	4b76      	ldr	r3, [pc, #472]	; (8000728 <main+0x4e4>)
 800054e:	7898      	ldrb	r0, [r3, #2]
 8000550:	4976      	ldr	r1, [pc, #472]	; (800072c <main+0x4e8>)
 8000552:	0013      	movs	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	189b      	adds	r3, r3, r2
 8000558:	18cb      	adds	r3, r1, r3
 800055a:	3301      	adds	r3, #1
 800055c:	1c02      	adds	r2, r0, #0
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	193b      	adds	r3, r7, r4
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	4b70      	ldr	r3, [pc, #448]	; (8000728 <main+0x4e4>)
 8000566:	78d8      	ldrb	r0, [r3, #3]
 8000568:	4970      	ldr	r1, [pc, #448]	; (800072c <main+0x4e8>)
 800056a:	0013      	movs	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	189b      	adds	r3, r3, r2
 8000570:	18cb      	adds	r3, r1, r3
 8000572:	3302      	adds	r3, #2
 8000574:	1c02      	adds	r2, r0, #0
 8000576:	701a      	strb	r2, [r3, #0]
	  				  }
	  			  }
	  		  memset(buf,0,7);
 8000578:	4b6b      	ldr	r3, [pc, #428]	; (8000728 <main+0x4e4>)
 800057a:	2207      	movs	r2, #7
 800057c:	2100      	movs	r1, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f002 fa32 	bl	80029e8 <memset>
	  		  HAL_Delay(5);
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fc39 	bl	8000dfc <HAL_Delay>
	  for(uint8_t i = 0; i < 4; i++){
 800058a:	2144      	movs	r1, #68	; 0x44
 800058c:	187b      	adds	r3, r7, r1
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	187b      	adds	r3, r7, r1
 8000592:	3201      	adds	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	2344      	movs	r3, #68	; 0x44
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d9ab      	bls.n	80004f8 <main+0x2b4>
	  sprintf(str, "PZEM-004T value: \r\n"
			  " 1 - %d.%dV / %d.%02dA / %dW / %dWh\r\n"
			  " 2 - %d.%dV / %d.%02dA / %dW / %dWh\r\n"
			  " 3 - %d.%dV / %d.%02dA / %dW / %dWh\r\n"
			  " 4 - %d.%dV / %d.%02dA / %dW / %dWh\r\n\r\n",
			  V[0][0]+V[0][1], V[0][2], A[0][0], A[0][1], W[0][0] + W[0][1], Wh[0][0]+Wh[0][1]+Wh[0][2],
 80005a0:	4b63      	ldr	r3, [pc, #396]	; (8000730 <main+0x4ec>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	001a      	movs	r2, r3
 80005a6:	4b62      	ldr	r3, [pc, #392]	; (8000730 <main+0x4ec>)
 80005a8:	785b      	ldrb	r3, [r3, #1]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005aa:	18d3      	adds	r3, r2, r3
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			  V[0][0]+V[0][1], V[0][2], A[0][0], A[0][1], W[0][0] + W[0][1], Wh[0][0]+Wh[0][1]+Wh[0][2],
 80005ae:	4b60      	ldr	r3, [pc, #384]	; (8000730 <main+0x4ec>)
 80005b0:	789b      	ldrb	r3, [r3, #2]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
			  V[0][0]+V[0][1], V[0][2], A[0][0], A[0][1], W[0][0] + W[0][1], Wh[0][0]+Wh[0][1]+Wh[0][2],
 80005b4:	4b5f      	ldr	r3, [pc, #380]	; (8000734 <main+0x4f0>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
			  V[0][0]+V[0][1], V[0][2], A[0][0], A[0][1], W[0][0] + W[0][1], Wh[0][0]+Wh[0][1]+Wh[0][2],
 80005ba:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <main+0x4f0>)
 80005bc:	785b      	ldrb	r3, [r3, #1]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
			  V[0][0]+V[0][1], V[0][2], A[0][0], A[0][1], W[0][0] + W[0][1], Wh[0][0]+Wh[0][1]+Wh[0][2],
 80005c0:	4b5d      	ldr	r3, [pc, #372]	; (8000738 <main+0x4f4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001a      	movs	r2, r3
 80005c6:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <main+0x4f4>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005ca:	18d1      	adds	r1, r2, r3
 80005cc:	62f9      	str	r1, [r7, #44]	; 0x2c
			  V[0][0]+V[0][1], V[0][2], A[0][0], A[0][1], W[0][0] + W[0][1], Wh[0][0]+Wh[0][1]+Wh[0][2],
 80005ce:	4b57      	ldr	r3, [pc, #348]	; (800072c <main+0x4e8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b55      	ldr	r3, [pc, #340]	; (800072c <main+0x4e8>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	4a54      	ldr	r2, [pc, #336]	; (800072c <main+0x4e8>)
 80005dc:	7892      	ldrb	r2, [r2, #2]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005de:	1898      	adds	r0, r3, r2
 80005e0:	62b8      	str	r0, [r7, #40]	; 0x28
			  V[1][0]+V[1][1], V[1][2], A[1][0], A[1][1], W[1][0] + W[1][1], Wh[1][0]+Wh[1][1]+Wh[1][2],
 80005e2:	4b53      	ldr	r3, [pc, #332]	; (8000730 <main+0x4ec>)
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	001a      	movs	r2, r3
 80005e8:	4b51      	ldr	r3, [pc, #324]	; (8000730 <main+0x4ec>)
 80005ea:	791b      	ldrb	r3, [r3, #4]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005ec:	18d4      	adds	r4, r2, r3
 80005ee:	627c      	str	r4, [r7, #36]	; 0x24
			  V[1][0]+V[1][1], V[1][2], A[1][0], A[1][1], W[1][0] + W[1][1], Wh[1][0]+Wh[1][1]+Wh[1][2],
 80005f0:	4b4f      	ldr	r3, [pc, #316]	; (8000730 <main+0x4ec>)
 80005f2:	795b      	ldrb	r3, [r3, #5]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005f4:	623b      	str	r3, [r7, #32]
			  V[1][0]+V[1][1], V[1][2], A[1][0], A[1][1], W[1][0] + W[1][1], Wh[1][0]+Wh[1][1]+Wh[1][2],
 80005f6:	4b4f      	ldr	r3, [pc, #316]	; (8000734 <main+0x4f0>)
 80005f8:	78db      	ldrb	r3, [r3, #3]
	  sprintf(str, "PZEM-004T value: \r\n"
 80005fa:	61fb      	str	r3, [r7, #28]
			  V[1][0]+V[1][1], V[1][2], A[1][0], A[1][1], W[1][0] + W[1][1], Wh[1][0]+Wh[1][1]+Wh[1][2],
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <main+0x4f0>)
 80005fe:	791b      	ldrb	r3, [r3, #4]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000600:	61bb      	str	r3, [r7, #24]
			  V[1][0]+V[1][1], V[1][2], A[1][0], A[1][1], W[1][0] + W[1][1], Wh[1][0]+Wh[1][1]+Wh[1][2],
 8000602:	4b4d      	ldr	r3, [pc, #308]	; (8000738 <main+0x4f4>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	001a      	movs	r2, r3
 8000608:	4b4b      	ldr	r3, [pc, #300]	; (8000738 <main+0x4f4>)
 800060a:	791b      	ldrb	r3, [r3, #4]
	  sprintf(str, "PZEM-004T value: \r\n"
 800060c:	18d2      	adds	r2, r2, r3
 800060e:	617a      	str	r2, [r7, #20]
			  V[1][0]+V[1][1], V[1][2], A[1][0], A[1][1], W[1][0] + W[1][1], Wh[1][0]+Wh[1][1]+Wh[1][2],
 8000610:	4b46      	ldr	r3, [pc, #280]	; (800072c <main+0x4e8>)
 8000612:	78db      	ldrb	r3, [r3, #3]
 8000614:	001a      	movs	r2, r3
 8000616:	4b45      	ldr	r3, [pc, #276]	; (800072c <main+0x4e8>)
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	18d2      	adds	r2, r2, r3
 800061c:	4b43      	ldr	r3, [pc, #268]	; (800072c <main+0x4e8>)
 800061e:	795b      	ldrb	r3, [r3, #5]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000620:	18d0      	adds	r0, r2, r3
 8000622:	6138      	str	r0, [r7, #16]
			  V[2][0]+V[2][1], V[2][2], A[2][0], A[2][1], W[2][0] + W[2][1], Wh[2][0]+Wh[2][1]+Wh[2][2],
 8000624:	4b42      	ldr	r3, [pc, #264]	; (8000730 <main+0x4ec>)
 8000626:	799b      	ldrb	r3, [r3, #6]
 8000628:	001a      	movs	r2, r3
 800062a:	4b41      	ldr	r3, [pc, #260]	; (8000730 <main+0x4ec>)
 800062c:	79db      	ldrb	r3, [r3, #7]
	  sprintf(str, "PZEM-004T value: \r\n"
 800062e:	4693      	mov	fp, r2
 8000630:	449b      	add	fp, r3
			  V[2][0]+V[2][1], V[2][2], A[2][0], A[2][1], W[2][0] + W[2][1], Wh[2][0]+Wh[2][1]+Wh[2][2],
 8000632:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <main+0x4ec>)
 8000634:	7a1b      	ldrb	r3, [r3, #8]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000636:	60fb      	str	r3, [r7, #12]
			  V[2][0]+V[2][1], V[2][2], A[2][0], A[2][1], W[2][0] + W[2][1], Wh[2][0]+Wh[2][1]+Wh[2][2],
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <main+0x4f0>)
 800063a:	799b      	ldrb	r3, [r3, #6]
	  sprintf(str, "PZEM-004T value: \r\n"
 800063c:	60bb      	str	r3, [r7, #8]
			  V[2][0]+V[2][1], V[2][2], A[2][0], A[2][1], W[2][0] + W[2][1], Wh[2][0]+Wh[2][1]+Wh[2][2],
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <main+0x4f0>)
 8000640:	79db      	ldrb	r3, [r3, #7]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000642:	607b      	str	r3, [r7, #4]
			  V[2][0]+V[2][1], V[2][2], A[2][0], A[2][1], W[2][0] + W[2][1], Wh[2][0]+Wh[2][1]+Wh[2][2],
 8000644:	4b3c      	ldr	r3, [pc, #240]	; (8000738 <main+0x4f4>)
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	001a      	movs	r2, r3
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <main+0x4f4>)
 800064c:	79db      	ldrb	r3, [r3, #7]
	  sprintf(str, "PZEM-004T value: \r\n"
 800064e:	4691      	mov	r9, r2
 8000650:	4499      	add	r9, r3
			  V[2][0]+V[2][1], V[2][2], A[2][0], A[2][1], W[2][0] + W[2][1], Wh[2][0]+Wh[2][1]+Wh[2][2],
 8000652:	4b36      	ldr	r3, [pc, #216]	; (800072c <main+0x4e8>)
 8000654:	799b      	ldrb	r3, [r3, #6]
 8000656:	001a      	movs	r2, r3
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <main+0x4e8>)
 800065a:	79db      	ldrb	r3, [r3, #7]
 800065c:	18d2      	adds	r2, r2, r3
 800065e:	4b33      	ldr	r3, [pc, #204]	; (800072c <main+0x4e8>)
 8000660:	7a1b      	ldrb	r3, [r3, #8]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000662:	4694      	mov	ip, r2
 8000664:	449c      	add	ip, r3
			  V[3][0]+V[3][1], V[3][2], A[3][0], A[3][1], W[3][0] + W[3][1], Wh[3][0]+Wh[3][1]+Wh[3][2]); // Формируем данные для отправки в UART
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <main+0x4ec>)
 8000668:	7a5b      	ldrb	r3, [r3, #9]
 800066a:	001a      	movs	r2, r3
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <main+0x4ec>)
 800066e:	7a9b      	ldrb	r3, [r3, #10]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000670:	18d5      	adds	r5, r2, r3
			  V[3][0]+V[3][1], V[3][2], A[3][0], A[3][1], W[3][0] + W[3][1], Wh[3][0]+Wh[3][1]+Wh[3][2]); // Формируем данные для отправки в UART
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <main+0x4ec>)
 8000674:	7adb      	ldrb	r3, [r3, #11]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000676:	469a      	mov	sl, r3
			  V[3][0]+V[3][1], V[3][2], A[3][0], A[3][1], W[3][0] + W[3][1], Wh[3][0]+Wh[3][1]+Wh[3][2]); // Формируем данные для отправки в UART
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <main+0x4f0>)
 800067a:	7a5b      	ldrb	r3, [r3, #9]
	  sprintf(str, "PZEM-004T value: \r\n"
 800067c:	4698      	mov	r8, r3
			  V[3][0]+V[3][1], V[3][2], A[3][0], A[3][1], W[3][0] + W[3][1], Wh[3][0]+Wh[3][1]+Wh[3][2]); // Формируем данные для отправки в UART
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <main+0x4f0>)
 8000680:	7a9b      	ldrb	r3, [r3, #10]
	  sprintf(str, "PZEM-004T value: \r\n"
 8000682:	001e      	movs	r6, r3
			  V[3][0]+V[3][1], V[3][2], A[3][0], A[3][1], W[3][0] + W[3][1], Wh[3][0]+Wh[3][1]+Wh[3][2]); // Формируем данные для отправки в UART
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <main+0x4f4>)
 8000686:	7a5b      	ldrb	r3, [r3, #9]
 8000688:	001a      	movs	r2, r3
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <main+0x4f4>)
 800068c:	7a9b      	ldrb	r3, [r3, #10]
	  sprintf(str, "PZEM-004T value: \r\n"
 800068e:	18d1      	adds	r1, r2, r3
			  V[3][0]+V[3][1], V[3][2], A[3][0], A[3][1], W[3][0] + W[3][1], Wh[3][0]+Wh[3][1]+Wh[3][2]); // Формируем данные для отправки в UART
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <main+0x4e8>)
 8000692:	7a5b      	ldrb	r3, [r3, #9]
 8000694:	001a      	movs	r2, r3
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <main+0x4e8>)
 8000698:	7a9b      	ldrb	r3, [r3, #10]
 800069a:	18d2      	adds	r2, r2, r3
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <main+0x4e8>)
 800069e:	7adb      	ldrb	r3, [r3, #11]
	  sprintf(str, "PZEM-004T value: \r\n"
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	4c26      	ldr	r4, [pc, #152]	; (800073c <main+0x4f8>)
 80006a4:	4826      	ldr	r0, [pc, #152]	; (8000740 <main+0x4fc>)
 80006a6:	9315      	str	r3, [sp, #84]	; 0x54
 80006a8:	9114      	str	r1, [sp, #80]	; 0x50
 80006aa:	9613      	str	r6, [sp, #76]	; 0x4c
 80006ac:	4646      	mov	r6, r8
 80006ae:	9612      	str	r6, [sp, #72]	; 0x48
 80006b0:	4656      	mov	r6, sl
 80006b2:	9611      	str	r6, [sp, #68]	; 0x44
 80006b4:	9510      	str	r5, [sp, #64]	; 0x40
 80006b6:	4666      	mov	r6, ip
 80006b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80006ba:	464e      	mov	r6, r9
 80006bc:	960e      	str	r6, [sp, #56]	; 0x38
 80006be:	687e      	ldr	r6, [r7, #4]
 80006c0:	960d      	str	r6, [sp, #52]	; 0x34
 80006c2:	68be      	ldr	r6, [r7, #8]
 80006c4:	960c      	str	r6, [sp, #48]	; 0x30
 80006c6:	68fe      	ldr	r6, [r7, #12]
 80006c8:	960b      	str	r6, [sp, #44]	; 0x2c
 80006ca:	465e      	mov	r6, fp
 80006cc:	960a      	str	r6, [sp, #40]	; 0x28
 80006ce:	693d      	ldr	r5, [r7, #16]
 80006d0:	9509      	str	r5, [sp, #36]	; 0x24
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	9208      	str	r2, [sp, #32]
 80006d6:	69ba      	ldr	r2, [r7, #24]
 80006d8:	9207      	str	r2, [sp, #28]
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	9206      	str	r2, [sp, #24]
 80006de:	6a3a      	ldr	r2, [r7, #32]
 80006e0:	9205      	str	r2, [sp, #20]
 80006e2:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80006e4:	9604      	str	r6, [sp, #16]
 80006e6:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80006e8:	9503      	str	r5, [sp, #12]
 80006ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80006ec:	9102      	str	r1, [sp, #8]
 80006ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006f0:	9101      	str	r1, [sp, #4]
 80006f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006fa:	0021      	movs	r1, r4
 80006fc:	f002 f97c 	bl	80029f8 <siprintf>
	  HAL_UART_Transmit(UART_MQTT, str, strlen(str), 100); // Отправляем данные в UART
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0x4fc>)
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff fd00 	bl	8000108 <strlen>
 8000708:	0003      	movs	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	490c      	ldr	r1, [pc, #48]	; (8000740 <main+0x4fc>)
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <main+0x500>)
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	f001 fbc3 	bl	8001e9c <HAL_UART_Transmit>

	  HAL_Delay(1500);
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <main+0x504>)
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fb6f 	bl	8000dfc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Светодиод для теста
 800071e:	e5a3      	b.n	8000268 <main+0x24>
 8000720:	200000ac 	.word	0x200000ac
 8000724:	20000018 	.word	0x20000018
 8000728:	2000027c 	.word	0x2000027c
 800072c:	20000270 	.word	0x20000270
 8000730:	2000024c 	.word	0x2000024c
 8000734:	20000258 	.word	0x20000258
 8000738:	20000264 	.word	0x20000264
 800073c:	080032e4 	.word	0x080032e4
 8000740:	200001b4 	.word	0x200001b4
 8000744:	20000130 	.word	0x20000130
 8000748:	000005dc 	.word	0x000005dc

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b095      	sub	sp, #84	; 0x54
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	2420      	movs	r4, #32
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	2330      	movs	r3, #48	; 0x30
 800075a:	001a      	movs	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	f002 f943 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000762:	2310      	movs	r3, #16
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	0018      	movs	r0, r3
 8000768:	2310      	movs	r3, #16
 800076a:	001a      	movs	r2, r3
 800076c:	2100      	movs	r1, #0
 800076e:	f002 f93b 	bl	80029e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000772:	003b      	movs	r3, r7
 8000774:	0018      	movs	r0, r3
 8000776:	2310      	movs	r3, #16
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f002 f934 	bl	80029e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	0021      	movs	r1, r4
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2201      	movs	r2, #1
 800078c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2210      	movs	r2, #16
 8000792:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2202      	movs	r2, #2
 8000798:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	22a0      	movs	r2, #160	; 0xa0
 80007a4:	0392      	lsls	r2, r2, #14
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fde5 	bl	8001380 <HAL_RCC_OscConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ba:	f000 f965 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	2110      	movs	r1, #16
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2207      	movs	r2, #7
 80007c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2101      	movs	r1, #1
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f8e9 	bl	80019b4 <HAL_RCC_ClockConfig>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e6:	f000 f94f 	bl	8000a88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007ea:	003b      	movs	r3, r7
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007f0:	003b      	movs	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f6:	003b      	movs	r3, r7
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 fa2d 	bl	8001c58 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000802:	f000 f941 	bl	8000a88 <Error_Handler>
  }
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b015      	add	sp, #84	; 0x54
 800080c:	bd90      	pop	{r4, r7, pc}
	...

08000810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART1_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800081c:	2296      	movs	r2, #150	; 0x96
 800081e:	0192      	lsls	r2, r2, #6
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_USART1_UART_Init+0x58>)
 8000854:	0018      	movs	r0, r3
 8000856:	f001 facd 	bl	8001df4 <HAL_UART_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f913 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000ac 	.word	0x200000ac
 800086c:	40013800 	.word	0x40013800

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x5c>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800087c:	2296      	movs	r2, #150	; 0x96
 800087e:	0212      	lsls	r2, r2, #8
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x58>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fa9d 	bl	8001df4 <HAL_UART_Init>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f8e3 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000130 	.word	0x20000130
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	2414      	movs	r4, #20
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f002 f881 	bl	80029e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b40      	ldr	r3, [pc, #256]	; (80009e8 <MX_GPIO_Init+0x118>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <MX_GPIO_Init+0x118>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0309      	lsls	r1, r1, #12
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <MX_GPIO_Init+0x118>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	031b      	lsls	r3, r3, #12
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	03c9      	lsls	r1, r1, #15
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	03db      	lsls	r3, r3, #15
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000920:	695a      	ldr	r2, [r3, #20]
 8000922:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0289      	lsls	r1, r1, #10
 8000928:	430a      	orrs	r2, r1
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_GPIO_Init+0x118>)
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	029b      	lsls	r3, r3, #10
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_GPIO_Init+0x118>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_GPIO_Init+0x118>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	02c9      	lsls	r1, r1, #11
 8000944:	430a      	orrs	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_GPIO_Init+0x118>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	02db      	lsls	r3, r3, #11
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_GPIO_Init+0x11c>)
 8000958:	2200      	movs	r2, #0
 800095a:	2103      	movs	r1, #3
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fcd7 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000962:	2390      	movs	r3, #144	; 0x90
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	0018      	movs	r0, r3
 800096c:	f000 fcd0 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	0192      	lsls	r2, r2, #6
 8000976:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2284      	movs	r2, #132	; 0x84
 800097c:	0392      	lsls	r2, r2, #14
 800097e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0x11c>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 fb4f 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2203      	movs	r2, #3
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2201      	movs	r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2202      	movs	r2, #2
 80009a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <MX_GPIO_Init+0x11c>)
 80009ae:	0019      	movs	r1, r3
 80009b0:	0010      	movs	r0, r2
 80009b2:	f000 fb3d 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2220      	movs	r2, #32
 80009bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	2390      	movs	r3, #144	; 0x90
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 fb29 	bl	8001030 <HAL_GPIO_Init>

}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b00b      	add	sp, #44	; 0x2c
 80009e4:	bd90      	pop	{r4, r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800

080009f0 <cntUART>:

/* USER CODE BEGIN 4 */
void cntUART(uint8_t i){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
	  if(i == 0) { HAL_GPIO_WritePin(GPIO_PORT_MUX_A, GPIO_PIN_MUX_A, 0); HAL_GPIO_WritePin(GPIO_PORT_MUX_B, GPIO_PIN_MUX_B, 0); }
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10b      	bne.n	8000a1c <cntUART+0x2c>
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <cntUART+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fc80 	bl	8001310 <HAL_GPIO_WritePin>
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <cntUART+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	2102      	movs	r1, #2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fc7a 	bl	8001310 <HAL_GPIO_WritePin>
	  if(i == 1) { HAL_GPIO_WritePin(GPIO_PORT_MUX_A, GPIO_PIN_MUX_A, 1); HAL_GPIO_WritePin(GPIO_PORT_MUX_B, GPIO_PIN_MUX_B, 0); }
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d10b      	bne.n	8000a3c <cntUART+0x4c>
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <cntUART+0x94>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	2101      	movs	r1, #1
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fc70 	bl	8001310 <HAL_GPIO_WritePin>
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <cntUART+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2102      	movs	r1, #2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fc6a 	bl	8001310 <HAL_GPIO_WritePin>
	  if(i == 2) { HAL_GPIO_WritePin(GPIO_PORT_MUX_A, GPIO_PIN_MUX_A, 0); HAL_GPIO_WritePin(GPIO_PORT_MUX_B, GPIO_PIN_MUX_B, 1); }
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d10b      	bne.n	8000a5c <cntUART+0x6c>
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <cntUART+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	2101      	movs	r1, #1
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fc60 	bl	8001310 <HAL_GPIO_WritePin>
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <cntUART+0x94>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	2102      	movs	r1, #2
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fc5a 	bl	8001310 <HAL_GPIO_WritePin>
	  if(i == 3) { HAL_GPIO_WritePin(GPIO_PORT_MUX_A, GPIO_PIN_MUX_A, 1); HAL_GPIO_WritePin(GPIO_PORT_MUX_B, GPIO_PIN_MUX_B, 1); }
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d10b      	bne.n	8000a7c <cntUART+0x8c>
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <cntUART+0x94>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fc50 	bl	8001310 <HAL_GPIO_WritePin>
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <cntUART+0x94>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	2102      	movs	r1, #2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 fc4a 	bl	8001310 <HAL_GPIO_WritePin>
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	48000800 	.word	0x48000800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	69da      	ldr	r2, [r3, #28]
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	0549      	lsls	r1, r1, #21
 8000abc:	430a      	orrs	r2, r1
 8000abe:	61da      	str	r2, [r3, #28]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	055b      	lsls	r3, r3, #21
 8000ac8:	4013      	ands	r3, r2
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b08d      	sub	sp, #52	; 0x34
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	241c      	movs	r4, #28
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f001 ff7a 	bl	80029e8 <memset>
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <HAL_UART_MspInit+0x14c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d157      	bne.n	8000bae <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b00:	699a      	ldr	r2, [r3, #24]
 8000b02:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	01c9      	lsls	r1, r1, #7
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	619a      	str	r2, [r3, #24]
 8000b0c:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b0e:	699a      	ldr	r2, [r3, #24]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0289      	lsls	r1, r1, #10
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	02c9      	lsls	r1, r1, #11
 8000b40:	430a      	orrs	r2, r1
 8000b42:	615a      	str	r2, [r3, #20]
 8000b44:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	02db      	lsls	r3, r3, #11
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	00d2      	lsls	r2, r2, #3
 8000b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2201      	movs	r2, #1
 8000b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	193a      	adds	r2, r7, r4
 8000b74:	2390      	movs	r3, #144	; 0x90
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fa58 	bl	8001030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b80:	0021      	movs	r1, r4
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_UART_MspInit+0x154>)
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	0010      	movs	r0, r2
 8000ba8:	f000 fa42 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bac:	e037      	b.n	8000c1e <HAL_UART_MspInit+0x142>
  else if(huart->Instance==USART2)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0x158>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d132      	bne.n	8000c1e <HAL_UART_MspInit+0x142>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000bba:	69da      	ldr	r2, [r3, #28]
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000bbe:	2180      	movs	r1, #128	; 0x80
 8000bc0:	0289      	lsls	r1, r1, #10
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000bc8:	69da      	ldr	r2, [r3, #28]
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	029b      	lsls	r3, r3, #10
 8000bce:	4013      	ands	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	0289      	lsls	r1, r1, #10
 8000bde:	430a      	orrs	r2, r1
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_UART_MspInit+0x150>)
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	029b      	lsls	r3, r3, #10
 8000bea:	4013      	ands	r3, r2
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf0:	211c      	movs	r1, #28
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	220c      	movs	r2, #12
 8000bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	187a      	adds	r2, r7, r1
 8000c12:	2390      	movs	r3, #144	; 0x90
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fa09 	bl	8001030 <HAL_GPIO_Init>
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b00d      	add	sp, #52	; 0x34
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	40004400 	.word	0x40004400

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f8b2 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f001 fe7c 	bl	8002994 <__errno>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	18d2      	adds	r2, r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b006      	add	sp, #24
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20002000 	.word	0x20002000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	20000284 	.word	0x20000284
 8000cd0:	200002a0 	.word	0x200002a0

08000cd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ce2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d0a:	f7ff ffe3 	bl	8000cd4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d0e:	f001 fe47 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d12:	f7ff fa97 	bl	8000244 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   r0, =_estack
 8000d18:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d24:	08003404 	.word	0x08003404
  ldr r2, =_sbss
 8000d28:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d2c:	2000029c 	.word	0x2000029c

08000d30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_IRQHandler>
	...

08000d34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_Init+0x24>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_Init+0x24>)
 8000d3e:	2110      	movs	r1, #16
 8000d40:	430a      	orrs	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f809 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4a:	f7ff fea3 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d66:	681c      	ldr	r4, [r3, #0]
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_InitTick+0x60>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	23fa      	movs	r3, #250	; 0xfa
 8000d70:	0098      	lsls	r0, r3, #2
 8000d72:	f7ff f9db 	bl	800012c <__udivsi3>
 8000d76:	0003      	movs	r3, r0
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0020      	movs	r0, r4
 8000d7c:	f7ff f9d6 	bl	800012c <__udivsi3>
 8000d80:	0003      	movs	r3, r0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 f905 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e00f      	b.n	8000db0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d80b      	bhi.n	8000dae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 f8e2 	bl	8000f68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_InitTick+0x64>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b003      	add	sp, #12
 8000db6:	bd90      	pop	{r4, r7, pc}
 8000db8:	20000020 	.word	0x20000020
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	20000024 	.word	0x20000024

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	18d2      	adds	r2, r2, r3
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000028 	.word	0x20000028
 8000de4:	20000288 	.word	0x20000288

08000de8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000288 	.word	0x20000288

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	f7ff ffe0 	bl	8000de8 <HAL_GetTick>
 8000e28:	0002      	movs	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000028 	.word	0x20000028

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b7f      	cmp	r3, #127	; 0x7f
 8000e58:	d828      	bhi.n	8000eac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <__NVIC_SetPriority+0xd4>)
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	33c0      	adds	r3, #192	; 0xc0
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	589b      	ldr	r3, [r3, r2]
 8000e6a:	1dfa      	adds	r2, r7, #7
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	0011      	movs	r1, r2
 8000e70:	2203      	movs	r2, #3
 8000e72:	400a      	ands	r2, r1
 8000e74:	00d2      	lsls	r2, r2, #3
 8000e76:	21ff      	movs	r1, #255	; 0xff
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	43d2      	mvns	r2, r2
 8000e7e:	401a      	ands	r2, r3
 8000e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	019b      	lsls	r3, r3, #6
 8000e86:	22ff      	movs	r2, #255	; 0xff
 8000e88:	401a      	ands	r2, r3
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	2303      	movs	r3, #3
 8000e92:	4003      	ands	r3, r0
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	481f      	ldr	r0, [pc, #124]	; (8000f18 <__NVIC_SetPriority+0xd4>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	33c0      	adds	r3, #192	; 0xc0
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eaa:	e031      	b.n	8000f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <__NVIC_SetPriority+0xd8>)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	3b08      	subs	r3, #8
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	1dfa      	adds	r2, r7, #7
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	400a      	ands	r2, r1
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	21ff      	movs	r1, #255	; 0xff
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	43d2      	mvns	r2, r2
 8000eda:	401a      	ands	r2, r3
 8000edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	2303      	movs	r3, #3
 8000eee:	4003      	ands	r3, r0
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <__NVIC_SetPriority+0xd8>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001c      	movs	r4, r3
 8000efc:	230f      	movs	r3, #15
 8000efe:	4023      	ands	r3, r4
 8000f00:	3b08      	subs	r3, #8
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	430a      	orrs	r2, r1
 8000f06:	3306      	adds	r3, #6
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	18c3      	adds	r3, r0, r3
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b003      	add	sp, #12
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	045b      	lsls	r3, r3, #17
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d301      	bcc.n	8000f38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f34:	2301      	movs	r3, #1
 8000f36:	e010      	b.n	8000f5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <SysTick_Config+0x44>)
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	3a01      	subs	r2, #1
 8000f3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f40:	2301      	movs	r3, #1
 8000f42:	425b      	negs	r3, r3
 8000f44:	2103      	movs	r1, #3
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff ff7c 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <SysTick_Config+0x44>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <SysTick_Config+0x44>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	210f      	movs	r1, #15
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	1c02      	adds	r2, r0, #0
 8000f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ffbf 	bl	8000f20 <SysTick_Config>
 8000fa2:	0003      	movs	r3, r0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2221      	movs	r2, #33	; 0x21
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d008      	beq.n	8000fd2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e020      	b.n	8001014 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	210e      	movs	r1, #14
 8000fde:	438a      	bics	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	000a      	movs	r2, r1
 8001000:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2221      	movs	r2, #33	; 0x21
 8001006:	2101      	movs	r1, #1
 8001008:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e14f      	b.n	80012e0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <HAL_GPIO_Init+0x28>
 8001056:	e140      	b.n	80012da <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
 8001060:	2b01      	cmp	r3, #1
 8001062:	d005      	beq.n	8001070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800106c:	2b02      	cmp	r3, #2
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	2201      	movs	r2, #1
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	4013      	ands	r3, r2
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d017      	beq.n	800110e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2203      	movs	r2, #3
 8001114:	4013      	ands	r3, r2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d123      	bne.n	8001162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	58d3      	ldr	r3, [r2, r3]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	2207      	movs	r2, #7
 800112c:	4013      	ands	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2107      	movs	r1, #7
 8001146:	400b      	ands	r3, r1
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	6939      	ldr	r1, [r7, #16]
 8001160:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	401a      	ands	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	23c0      	movs	r3, #192	; 0xc0
 800119c:	029b      	lsls	r3, r3, #10
 800119e:	4013      	ands	r3, r2
 80011a0:	d100      	bne.n	80011a4 <HAL_GPIO_Init+0x174>
 80011a2:	e09a      	b.n	80012da <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_GPIO_Init+0x2c8>)
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_GPIO_Init+0x2c8>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	430a      	orrs	r2, r1
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <HAL_GPIO_Init+0x2c8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4013      	ands	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x2cc>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	589b      	ldr	r3, [r3, r2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	2390      	movs	r3, #144	; 0x90
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x1e2>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a44      	ldr	r2, [pc, #272]	; (8001300 <HAL_GPIO_Init+0x2d0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x1de>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a43      	ldr	r2, [pc, #268]	; (8001304 <HAL_GPIO_Init+0x2d4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x1da>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a42      	ldr	r2, [pc, #264]	; (8001308 <HAL_GPIO_Init+0x2d8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x1d6>
 8001202:	2303      	movs	r3, #3
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x1e4>
 8001206:	2305      	movs	r3, #5
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x1e4>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x1e4>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x1e4>
 8001212:	2300      	movs	r3, #0
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	2103      	movs	r1, #3
 8001218:	400a      	ands	r2, r1
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <HAL_GPIO_Init+0x2cc>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_GPIO_Init+0x2dc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	025b      	lsls	r3, r3, #9
 800124a:	4013      	ands	r3, r2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_GPIO_Init+0x2dc>)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_GPIO_Init+0x2dc>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43da      	mvns	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	4013      	ands	r3, r2
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_GPIO_Init+0x2dc>)
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_GPIO_Init+0x2dc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	035b      	lsls	r3, r3, #13
 800129e:	4013      	ands	r3, r2
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_GPIO_Init+0x2dc>)
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_GPIO_Init+0x2dc>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	4013      	ands	r3, r2
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_GPIO_Init+0x2dc>)
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	40da      	lsrs	r2, r3
 80012e8:	1e13      	subs	r3, r2, #0
 80012ea:	d000      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
 80012ec:	e6a8      	b.n	8001040 <HAL_GPIO_Init+0x10>
  } 
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b006      	add	sp, #24
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	0008      	movs	r0, r1
 800131a:	0011      	movs	r1, r2
 800131c:	1cbb      	adds	r3, r7, #2
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	1c7b      	adds	r3, r7, #1
 8001324:	1c0a      	adds	r2, r1, #0
 8001326:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	1c7b      	adds	r3, r7, #1
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001330:	1cbb      	adds	r3, r7, #2
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e003      	b.n	8001342 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	1cbb      	adds	r3, r7, #2
 800133c:	881a      	ldrh	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	000a      	movs	r2, r1
 8001354:	1cbb      	adds	r3, r7, #2
 8001356:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800135e:	1cbb      	adds	r3, r7, #2
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	041a      	lsls	r2, r3, #16
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	1cb9      	adds	r1, r7, #2
 800136e:	8809      	ldrh	r1, [r1, #0]
 8001370:	400b      	ands	r3, r1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e301      	b.n	8001996 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2201      	movs	r2, #1
 8001398:	4013      	ands	r3, r2
 800139a:	d100      	bne.n	800139e <HAL_RCC_OscConfig+0x1e>
 800139c:	e08d      	b.n	80014ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800139e:	4bc3      	ldr	r3, [pc, #780]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	220c      	movs	r2, #12
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d00e      	beq.n	80013c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013aa:	4bc0      	ldr	r3, [pc, #768]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d116      	bne.n	80013e4 <HAL_RCC_OscConfig+0x64>
 80013b6:	4bbd      	ldr	r3, [pc, #756]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	401a      	ands	r2, r3
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	025b      	lsls	r3, r3, #9
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10d      	bne.n	80013e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4bb8      	ldr	r3, [pc, #736]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	029b      	lsls	r3, r3, #10
 80013d0:	4013      	ands	r3, r2
 80013d2:	d100      	bne.n	80013d6 <HAL_RCC_OscConfig+0x56>
 80013d4:	e070      	b.n	80014b8 <HAL_RCC_OscConfig+0x138>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d000      	beq.n	80013e0 <HAL_RCC_OscConfig+0x60>
 80013de:	e06b      	b.n	80014b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e2d8      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_OscConfig+0x7c>
 80013ec:	4baf      	ldr	r3, [pc, #700]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4bae      	ldr	r3, [pc, #696]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	0249      	lsls	r1, r1, #9
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e02f      	b.n	800145c <HAL_RCC_OscConfig+0xdc>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x9e>
 8001404:	4ba9      	ldr	r3, [pc, #676]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4ba8      	ldr	r3, [pc, #672]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800140a:	49a9      	ldr	r1, [pc, #676]	; (80016b0 <HAL_RCC_OscConfig+0x330>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	4ba6      	ldr	r3, [pc, #664]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4ba5      	ldr	r3, [pc, #660]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001416:	49a7      	ldr	r1, [pc, #668]	; (80016b4 <HAL_RCC_OscConfig+0x334>)
 8001418:	400a      	ands	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e01e      	b.n	800145c <HAL_RCC_OscConfig+0xdc>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b05      	cmp	r3, #5
 8001424:	d10e      	bne.n	8001444 <HAL_RCC_OscConfig+0xc4>
 8001426:	4ba1      	ldr	r3, [pc, #644]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4ba0      	ldr	r3, [pc, #640]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	02c9      	lsls	r1, r1, #11
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	4b9d      	ldr	r3, [pc, #628]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b9c      	ldr	r3, [pc, #624]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0249      	lsls	r1, r1, #9
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xdc>
 8001444:	4b99      	ldr	r3, [pc, #612]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b98      	ldr	r3, [pc, #608]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800144a:	4999      	ldr	r1, [pc, #612]	; (80016b0 <HAL_RCC_OscConfig+0x330>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b95      	ldr	r3, [pc, #596]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001456:	4997      	ldr	r1, [pc, #604]	; (80016b4 <HAL_RCC_OscConfig+0x334>)
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d014      	beq.n	800148e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcc0 	bl	8000de8 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146e:	f7ff fcbb 	bl	8000de8 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b64      	cmp	r3, #100	; 0x64
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e28a      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001480:	4b8a      	ldr	r3, [pc, #552]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0xee>
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fcab 	bl	8000de8 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fca6 	bl	8000de8 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e275      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	4b80      	ldr	r3, [pc, #512]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	029b      	lsls	r3, r3, #10
 80014b2:	4013      	ands	r3, r2
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x118>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x146>
 80014c4:	e069      	b.n	800159a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014c6:	4b79      	ldr	r3, [pc, #484]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	220c      	movs	r2, #12
 80014cc:	4013      	ands	r3, r2
 80014ce:	d00b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	220c      	movs	r2, #12
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d11c      	bne.n	8001516 <HAL_RCC_OscConfig+0x196>
 80014dc:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	4013      	ands	r3, r2
 80014e6:	d116      	bne.n	8001516 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e8:	4b70      	ldr	r3, [pc, #448]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e24b      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b6b      	ldr	r3, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	22f8      	movs	r2, #248	; 0xf8
 8001504:	4393      	bics	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	00da      	lsls	r2, r3, #3
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001514:	e041      	b.n	800159a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d024      	beq.n	8001568 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b62      	ldr	r3, [pc, #392]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fc5d 	bl	8000de8 <HAL_GetTick>
 800152e:	0003      	movs	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc58 	bl	8000de8 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e227      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2202      	movs	r2, #2
 800154c:	4013      	ands	r3, r2
 800154e:	d0f1      	beq.n	8001534 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	22f8      	movs	r2, #248	; 0xf8
 8001556:	4393      	bics	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	00da      	lsls	r2, r3, #3
 8001560:	4b52      	ldr	r3, [pc, #328]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e018      	b.n	800159a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b4f      	ldr	r3, [pc, #316]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800156e:	2101      	movs	r1, #1
 8001570:	438a      	bics	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fc38 	bl	8000de8 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fc33 	bl	8000de8 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e202      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	d1f1      	bne.n	800157e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2208      	movs	r2, #8
 80015a0:	4013      	ands	r3, r2
 80015a2:	d036      	beq.n	8001612 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d019      	beq.n	80015e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80015ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b0:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fc16 	bl	8000de8 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc11 	bl	8000de8 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1e0      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d4:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d0f1      	beq.n	80015c2 <HAL_RCC_OscConfig+0x242>
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80015e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	438a      	bics	r2, r1
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff fbfc 	bl	8000de8 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff fbf7 	bl	8000de8 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1c6      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	2202      	movs	r2, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d1f1      	bne.n	80015f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2204      	movs	r2, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d100      	bne.n	800161e <HAL_RCC_OscConfig+0x29e>
 800161c:	e0b4      	b.n	8001788 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	201f      	movs	r0, #31
 8001620:	183b      	adds	r3, r7, r0
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	055b      	lsls	r3, r3, #21
 800162e:	4013      	ands	r3, r2
 8001630:	d110      	bne.n	8001654 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0549      	lsls	r1, r1, #21
 800163c:	430a      	orrs	r2, r1
 800163e:	61da      	str	r2, [r3, #28]
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	055b      	lsls	r3, r3, #21
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800164e:	183b      	adds	r3, r7, r0
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x338>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d11a      	bne.n	8001696 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x338>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_RCC_OscConfig+0x338>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0049      	lsls	r1, r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fbbb 	bl	8000de8 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff fbb6 	bl	8000de8 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e185      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x338>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10e      	bne.n	80016bc <HAL_RCC_OscConfig+0x33c>
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_RCC_OscConfig+0x32c>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	621a      	str	r2, [r3, #32]
 80016aa:	e035      	b.n	8001718 <HAL_RCC_OscConfig+0x398>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	fffeffff 	.word	0xfffeffff
 80016b4:	fffbffff 	.word	0xfffbffff
 80016b8:	40007000 	.word	0x40007000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x35e>
 80016c4:	4bb6      	ldr	r3, [pc, #728]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4bb5      	ldr	r3, [pc, #724]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	438a      	bics	r2, r1
 80016ce:	621a      	str	r2, [r3, #32]
 80016d0:	4bb3      	ldr	r3, [pc, #716]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	4bb2      	ldr	r3, [pc, #712]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016d6:	2104      	movs	r1, #4
 80016d8:	438a      	bics	r2, r1
 80016da:	621a      	str	r2, [r3, #32]
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x398>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x380>
 80016e6:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4bad      	ldr	r3, [pc, #692]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016ec:	2104      	movs	r1, #4
 80016ee:	430a      	orrs	r2, r1
 80016f0:	621a      	str	r2, [r3, #32]
 80016f2:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016f4:	6a1a      	ldr	r2, [r3, #32]
 80016f6:	4baa      	ldr	r3, [pc, #680]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	621a      	str	r2, [r3, #32]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x398>
 8001700:	4ba7      	ldr	r3, [pc, #668]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001702:	6a1a      	ldr	r2, [r3, #32]
 8001704:	4ba6      	ldr	r3, [pc, #664]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001706:	2101      	movs	r1, #1
 8001708:	438a      	bics	r2, r1
 800170a:	621a      	str	r2, [r3, #32]
 800170c:	4ba4      	ldr	r3, [pc, #656]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800170e:	6a1a      	ldr	r2, [r3, #32]
 8001710:	4ba3      	ldr	r3, [pc, #652]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001712:	2104      	movs	r1, #4
 8001714:	438a      	bics	r2, r1
 8001716:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d014      	beq.n	800174a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fb62 	bl	8000de8 <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e009      	b.n	800173e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb5d 	bl	8000de8 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	4a9b      	ldr	r2, [pc, #620]	; (80019a4 <HAL_RCC_OscConfig+0x624>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e12b      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	4b98      	ldr	r3, [pc, #608]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x3aa>
 8001748:	e013      	b.n	8001772 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb4d 	bl	8000de8 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	e009      	b.n	8001768 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb48 	bl	8000de8 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	4a91      	ldr	r2, [pc, #580]	; (80019a4 <HAL_RCC_OscConfig+0x624>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e116      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	4b8d      	ldr	r3, [pc, #564]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001772:	231f      	movs	r3, #31
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b88      	ldr	r3, [pc, #544]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001782:	4989      	ldr	r1, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x628>)
 8001784:	400a      	ands	r2, r1
 8001786:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2210      	movs	r2, #16
 800178e:	4013      	ands	r3, r2
 8001790:	d063      	beq.n	800185a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d12a      	bne.n	80017f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800179a:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800179c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800179e:	4b80      	ldr	r3, [pc, #512]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017a6:	4b7e      	ldr	r3, [pc, #504]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb19 	bl	8000de8 <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017bc:	f7ff fb14 	bl	8000de8 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0e3      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017ce:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d2:	2202      	movs	r2, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f1      	beq.n	80017bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d8:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	22f8      	movs	r2, #248	; 0xf8
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	00da      	lsls	r2, r3, #3
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
 80017ee:	e034      	b.n	800185a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	3305      	adds	r3, #5
 80017f6:	d111      	bne.n	800181c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017f8:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001804:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	22f8      	movs	r2, #248	; 0xf8
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	00da      	lsls	r2, r3, #3
 8001814:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
 800181a:	e01e      	b.n	800185a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800181c:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800181e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001820:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001822:	2104      	movs	r1, #4
 8001824:	430a      	orrs	r2, r1
 8001826:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800182a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182c:	4b5c      	ldr	r3, [pc, #368]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800182e:	2101      	movs	r1, #1
 8001830:	438a      	bics	r2, r1
 8001832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff fad8 	bl	8000de8 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800183e:	f7ff fad3 	bl	8000de8 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0a2      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d1f1      	bne.n	800183e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x4e4>
 8001862:	e097      	b.n	8001994 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001864:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d100      	bne.n	8001872 <HAL_RCC_OscConfig+0x4f2>
 8001870:	e06b      	b.n	800194a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d14c      	bne.n	8001914 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001880:	494a      	ldr	r1, [pc, #296]	; (80019ac <HAL_RCC_OscConfig+0x62c>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff faaf 	bl	8000de8 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff faaa 	bl	8000de8 <HAL_GetTick>
 8001894:	0002      	movs	r2, r0
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e079      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	049b      	lsls	r3, r3, #18
 80018aa:	4013      	ands	r3, r2
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	220f      	movs	r2, #15
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <HAL_RCC_OscConfig+0x630>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	431a      	orrs	r2, r3
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0449      	lsls	r1, r1, #17
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fa7d 	bl	8000de8 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fa78 	bl	8000de8 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e047      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x574>
 8001912:	e03f      	b.n	8001994 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800191a:	4924      	ldr	r1, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x62c>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fa62 	bl	8000de8 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff fa5d 	bl	8000de8 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e02c      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	049b      	lsls	r3, r3, #18
 8001944:	4013      	ands	r3, r2
 8001946:	d1f0      	bne.n	800192a <HAL_RCC_OscConfig+0x5aa>
 8001948:	e024      	b.n	8001994 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e01f      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x620>)
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	429a      	cmp	r2, r3
 8001970:	d10e      	bne.n	8001990 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	220f      	movs	r2, #15
 8001976:	401a      	ands	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	23f0      	movs	r3, #240	; 0xf0
 8001984:	039b      	lsls	r3, r3, #14
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b008      	add	sp, #32
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	40021000 	.word	0x40021000
 80019a4:	00001388 	.word	0x00001388
 80019a8:	efffffff 	.word	0xefffffff
 80019ac:	feffffff 	.word	0xfeffffff
 80019b0:	ffc2ffff 	.word	0xffc2ffff

080019b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b3      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d911      	bls.n	80019fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4393      	bics	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e09a      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d015      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d006      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a14:	21e0      	movs	r1, #224	; 0xe0
 8001a16:	00c9      	lsls	r1, r1, #3
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	22f0      	movs	r2, #240	; 0xf0
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d114      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06e      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	049b      	lsls	r3, r3, #18
 8001a62:	4013      	ands	r3, r2
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e062      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e05b      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4393      	bics	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f9ac 	bl	8000de8 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7ff f9a7 	bl	8000de8 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <HAL_RCC_ClockConfig+0x18c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e042      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	220c      	movs	r2, #12
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1ec      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d211      	bcs.n	8001aee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4393      	bics	r3, r2
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x184>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e020      	b.n	8001b30 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2204      	movs	r2, #4
 8001af4:	4013      	ands	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_RCC_ClockConfig+0x190>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b0c:	f000 f820 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b10:	0001      	movs	r1, r0
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x188>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	220f      	movs	r2, #15
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x194>)
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	000a      	movs	r2, r1
 8001b22:	40da      	lsrs	r2, r3
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x198>)
 8001b26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff f917 	bl	8000d5c <HAL_InitTick>
  
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	00001388 	.word	0x00001388
 8001b44:	fffff8ff 	.word	0xfffff8ff
 8001b48:	080033b0 	.word	0x080033b0
 8001b4c:	20000020 	.word	0x20000020

08001b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b08f      	sub	sp, #60	; 0x3c
 8001b54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b56:	2314      	movs	r3, #20
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b5e:	c313      	stmia	r3!, {r0, r1, r4}
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b6a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d002      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x4a>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d003      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x50>
 8001b98:	e02d      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b9e:	e02d      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	0c9b      	lsrs	r3, r3, #18
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2214      	movs	r2, #20
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	1d3a      	adds	r2, r7, #4
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bca:	4812      	ldr	r0, [pc, #72]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bcc:	f7fe faae 	bl	800012c <__udivsi3>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	4353      	muls	r3, r2
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bda:	e009      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bde:	000a      	movs	r2, r1
 8001be0:	0152      	lsls	r2, r2, #5
 8001be2:	1a52      	subs	r2, r2, r1
 8001be4:	0193      	lsls	r3, r2, #6
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	185b      	adds	r3, r3, r1
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf4:	e002      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b00f      	add	sp, #60	; 0x3c
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	08003390 	.word	0x08003390
 8001c0c:	080033a0 	.word	0x080033a0
 8001c10:	40021000 	.word	0x40021000
 8001c14:	007a1200 	.word	0x007a1200

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b02      	ldr	r3, [pc, #8]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000020 	.word	0x20000020

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c30:	f7ff fff2 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c34:	0001      	movs	r1, r0
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	4013      	ands	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	40d9      	lsrs	r1, r3
 8001c46:	000b      	movs	r3, r1
}    
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000
 8001c54:	080033c0 	.word	0x080033c0

08001c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	025b      	lsls	r3, r3, #9
 8001c70:	4013      	ands	r3, r2
 8001c72:	d100      	bne.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c74:	e08e      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2017      	movs	r0, #23
 8001c78:	183b      	adds	r3, r7, r0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	055b      	lsls	r3, r3, #21
 8001c86:	4013      	ands	r3, r2
 8001c88:	d110      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	0549      	lsls	r1, r1, #21
 8001c94:	430a      	orrs	r2, r1
 8001c96:	61da      	str	r2, [r3, #28]
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c9a:	69da      	ldr	r2, [r3, #28]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	055b      	lsls	r3, r3, #21
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d11a      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb8:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	0049      	lsls	r1, r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f88f 	bl	8000de8 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	e008      	b.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd0:	f7ff f88a 	bl	8000de8 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e077      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	23c0      	movs	r3, #192	; 0xc0
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d034      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d02c      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1a:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1c:	6a1a      	ldr	r2, [r3, #32]
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0249      	lsls	r1, r1, #9
 8001d24:	430a      	orrs	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d2e:	492e      	ldr	r1, [pc, #184]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff f851 	bl	8000de8 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	e009      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff f84c 	bl	8000de8 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	4a25      	ldr	r2, [pc, #148]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e038      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	2202      	movs	r2, #2
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d7e:	2317      	movs	r3, #23
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d8e:	4918      	ldr	r1, [pc, #96]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	2203      	movs	r2, #3
 8001da4:	4393      	bics	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b006      	add	sp, #24
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40007000 	.word	0x40007000
 8001de4:	fffffcff 	.word	0xfffffcff
 8001de8:	fffeffff 	.word	0xfffeffff
 8001dec:	00001388 	.word	0x00001388
 8001df0:	efffffff 	.word	0xefffffff

08001df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e044      	b.n	8001e90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d107      	bne.n	8001e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2274      	movs	r2, #116	; 0x74
 8001e12:	2100      	movs	r1, #0
 8001e14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7fe fe5f 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2224      	movs	r2, #36	; 0x24
 8001e22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	438a      	bics	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f000 faac 	bl	8002394 <UART_SetConfig>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e024      	b.n	8001e90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 fbdf 	bl	8002614 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	490d      	ldr	r1, [pc, #52]	; (8001e98 <HAL_UART_Init+0xa4>)
 8001e62:	400a      	ands	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2108      	movs	r1, #8
 8001e72:	438a      	bics	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fc77 	bl	800277c <UART_CheckIdleState>
 8001e8e:	0003      	movs	r3, r0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b002      	add	sp, #8
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	fffff7ff 	.word	0xfffff7ff

08001e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	1dbb      	adds	r3, r7, #6
 8001eaa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d000      	beq.n	8001eb6 <HAL_UART_Transmit+0x1a>
 8001eb4:	e096      	b.n	8001fe4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_UART_Transmit+0x28>
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e08e      	b.n	8001fe6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	015b      	lsls	r3, r3, #5
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d109      	bne.n	8001ee8 <HAL_UART_Transmit+0x4c>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e07e      	b.n	8001fe6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2274      	movs	r2, #116	; 0x74
 8001eec:	5c9b      	ldrb	r3, [r3, r2]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Transmit+0x5a>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e077      	b.n	8001fe6 <HAL_UART_Transmit+0x14a>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2274      	movs	r2, #116	; 0x74
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	2100      	movs	r1, #0
 8001f04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2221      	movs	r2, #33	; 0x21
 8001f0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe ff6c 	bl	8000de8 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1dba      	adds	r2, r7, #6
 8001f18:	2150      	movs	r1, #80	; 0x50
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1dba      	adds	r2, r7, #6
 8001f22:	2152      	movs	r1, #82	; 0x52
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d108      	bne.n	8001f46 <HAL_UART_Transmit+0xaa>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
 8001f44:	e003      	b.n	8001f4e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2274      	movs	r2, #116	; 0x74
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001f56:	e02d      	b.n	8001fb4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	0013      	movs	r3, r2
 8001f62:	2200      	movs	r2, #0
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	f000 fc51 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e039      	b.n	8001fe6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	881a      	ldrh	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	05d2      	lsls	r2, r2, #23
 8001f82:	0dd2      	lsrs	r2, r2, #23
 8001f84:	b292      	uxth	r2, r2
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	e008      	b.n	8001fa2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2252      	movs	r2, #82	; 0x52
 8001fa6:	5a9b      	ldrh	r3, [r3, r2]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b299      	uxth	r1, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2252      	movs	r2, #82	; 0x52
 8001fb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2252      	movs	r2, #82	; 0x52
 8001fb8:	5a9b      	ldrh	r3, [r3, r2]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1cb      	bne.n	8001f58 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	0013      	movs	r3, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2140      	movs	r1, #64	; 0x40
 8001fce:	f000 fc1d 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e005      	b.n	8001fe6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b008      	add	sp, #32
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002004:	2b20      	cmp	r3, #32
 8002006:	d000      	beq.n	800200a <HAL_UART_Receive+0x1a>
 8002008:	e0c6      	b.n	8002198 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_UART_Receive+0x28>
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0be      	b.n	800219a <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	429a      	cmp	r2, r3
 8002026:	d109      	bne.n	800203c <HAL_UART_Receive+0x4c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d001      	beq.n	800203c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0ae      	b.n	800219a <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2274      	movs	r2, #116	; 0x74
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_UART_Receive+0x5a>
 8002046:	2302      	movs	r3, #2
 8002048:	e0a7      	b.n	800219a <HAL_UART_Receive+0x1aa>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2274      	movs	r2, #116	; 0x74
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	2100      	movs	r1, #0
 8002058:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2222      	movs	r2, #34	; 0x22
 800205e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002066:	f7fe febf 	bl	8000de8 <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1dba      	adds	r2, r7, #6
 8002072:	2158      	movs	r1, #88	; 0x58
 8002074:	8812      	ldrh	r2, [r2, #0]
 8002076:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1dba      	adds	r2, r7, #6
 800207c:	215a      	movs	r1, #90	; 0x5a
 800207e:	8812      	ldrh	r2, [r2, #0]
 8002080:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	015b      	lsls	r3, r3, #5
 800208a:	429a      	cmp	r2, r3
 800208c:	d10d      	bne.n	80020aa <HAL_UART_Receive+0xba>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d104      	bne.n	80020a0 <HAL_UART_Receive+0xb0>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	225c      	movs	r2, #92	; 0x5c
 800209a:	4942      	ldr	r1, [pc, #264]	; (80021a4 <HAL_UART_Receive+0x1b4>)
 800209c:	5299      	strh	r1, [r3, r2]
 800209e:	e01a      	b.n	80020d6 <HAL_UART_Receive+0xe6>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	225c      	movs	r2, #92	; 0x5c
 80020a4:	21ff      	movs	r1, #255	; 0xff
 80020a6:	5299      	strh	r1, [r3, r2]
 80020a8:	e015      	b.n	80020d6 <HAL_UART_Receive+0xe6>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_UART_Receive+0xde>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <HAL_UART_Receive+0xd4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	225c      	movs	r2, #92	; 0x5c
 80020be:	21ff      	movs	r1, #255	; 0xff
 80020c0:	5299      	strh	r1, [r3, r2]
 80020c2:	e008      	b.n	80020d6 <HAL_UART_Receive+0xe6>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	225c      	movs	r2, #92	; 0x5c
 80020c8:	217f      	movs	r1, #127	; 0x7f
 80020ca:	5299      	strh	r1, [r3, r2]
 80020cc:	e003      	b.n	80020d6 <HAL_UART_Receive+0xe6>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	225c      	movs	r2, #92	; 0x5c
 80020d2:	2100      	movs	r1, #0
 80020d4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80020d6:	2312      	movs	r3, #18
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	215c      	movs	r1, #92	; 0x5c
 80020de:	5a52      	ldrh	r2, [r2, r1]
 80020e0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d108      	bne.n	8002100 <HAL_UART_Receive+0x110>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d104      	bne.n	8002100 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	e003      	b.n	8002108 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2274      	movs	r2, #116	; 0x74
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002110:	e037      	b.n	8002182 <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	0013      	movs	r3, r2
 800211c:	2200      	movs	r2, #0
 800211e:	2120      	movs	r1, #32
 8002120:	f000 fb74 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e036      	b.n	800219a <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002138:	b29b      	uxth	r3, r3
 800213a:	2212      	movs	r2, #18
 800213c:	18ba      	adds	r2, r7, r2
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	4013      	ands	r3, r2
 8002142:	b29a      	uxth	r2, r3
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	3302      	adds	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	e00f      	b.n	8002170 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002156:	b29b      	uxth	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2212      	movs	r2, #18
 800215c:	18ba      	adds	r2, r7, r2
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4013      	ands	r3, r2
 8002164:	b2da      	uxtb	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	225a      	movs	r2, #90	; 0x5a
 8002174:	5a9b      	ldrh	r3, [r3, r2]
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b299      	uxth	r1, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	225a      	movs	r2, #90	; 0x5a
 8002180:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	225a      	movs	r2, #90	; 0x5a
 8002186:	5a9b      	ldrh	r3, [r3, r2]
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1c1      	bne.n	8002112 <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b008      	add	sp, #32
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	000001ff 	.word	0x000001ff

080021a8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	; 0x58
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b0:	f3ef 8310 	mrs	r3, PRIMASK
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80021b8:	657b      	str	r3, [r7, #84]	; 0x54
 80021ba:	2301      	movs	r3, #1
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	f383 8810 	msr	PRIMASK, r3
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	496f      	ldr	r1, [pc, #444]	; (8002390 <HAL_UART_Abort+0x1e8>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021dc:	f383 8810 	msr	PRIMASK, r3
}
 80021e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e2:	f3ef 8310 	mrs	r3, PRIMASK
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ea:	653b      	str	r3, [r7, #80]	; 0x50
 80021ec:	2301      	movs	r3, #1
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f2:	f383 8810 	msr	PRIMASK, r3
}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	438a      	bics	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220e:	f383 8810 	msr	PRIMASK, r3
}
 8002212:	46c0      	nop			; (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	2b01      	cmp	r3, #1
 800221a:	d118      	bne.n	800224e <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221c:	f3ef 8310 	mrs	r3, PRIMASK
 8002220:	623b      	str	r3, [r7, #32]
  return(result);
 8002222:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002226:	2301      	movs	r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	f383 8810 	msr	PRIMASK, r3
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2110      	movs	r1, #16
 800223e:	438a      	bics	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	f383 8810 	msr	PRIMASK, r3
}
 800224c:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	4013      	ands	r3, r2
 8002258:	2b80      	cmp	r3, #128	; 0x80
 800225a:	d135      	bne.n	80022c8 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800225c:	f3ef 8310 	mrs	r3, PRIMASK
 8002260:	617b      	str	r3, [r7, #20]
  return(result);
 8002262:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
 8002266:	2301      	movs	r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f383 8810 	msr	PRIMASK, r3
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	438a      	bics	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002284:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f383 8810 	msr	PRIMASK, r3
}
 800228c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d018      	beq.n	80022c8 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229a:	2200      	movs	r2, #0
 800229c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fe82 	bl	8000fac <HAL_DMA_Abort>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d00d      	beq.n	80022c8 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7fe feb3 	bl	800101c <HAL_DMA_GetError>
 80022b6:	0003      	movs	r3, r0
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d105      	bne.n	80022c8 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	2110      	movs	r1, #16
 80022c2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e05e      	b.n	8002386 <HAL_UART_Abort+0x1de>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d135      	bne.n	8002342 <HAL_UART_Abort+0x19a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d6:	f3ef 8310 	mrs	r3, PRIMASK
 80022da:	60bb      	str	r3, [r7, #8]
  return(result);
 80022dc:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022de:	647b      	str	r3, [r7, #68]	; 0x44
 80022e0:	2301      	movs	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2140      	movs	r1, #64	; 0x40
 80022f8:	438a      	bics	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	2b00      	cmp	r3, #0
 800230e:	d018      	beq.n	8002342 <HAL_UART_Abort+0x19a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	2200      	movs	r2, #0
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	0018      	movs	r0, r3
 800231e:	f7fe fe45 	bl	8000fac <HAL_DMA_Abort>
 8002322:	1e03      	subs	r3, r0, #0
 8002324:	d00d      	beq.n	8002342 <HAL_UART_Abort+0x19a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	0018      	movs	r0, r3
 800232c:	f7fe fe76 	bl	800101c <HAL_DMA_GetError>
 8002330:	0003      	movs	r3, r0
 8002332:	2b20      	cmp	r3, #32
 8002334:	d105      	bne.n	8002342 <HAL_UART_Abort+0x19a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2280      	movs	r2, #128	; 0x80
 800233a:	2110      	movs	r1, #16
 800233c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e021      	b.n	8002386 <HAL_UART_Abort+0x1de>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2252      	movs	r2, #82	; 0x52
 8002346:	2100      	movs	r1, #0
 8002348:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	225a      	movs	r2, #90	; 0x5a
 800234e:	2100      	movs	r1, #0
 8002350:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	220f      	movs	r2, #15
 8002358:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2108      	movs	r1, #8
 8002366:	430a      	orrs	r2, r1
 8002368:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	2100      	movs	r1, #0
 8002382:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b016      	add	sp, #88	; 0x58
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	fffffe1f 	.word	0xfffffe1f

08002394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800239c:	231e      	movs	r3, #30
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a8d      	ldr	r2, [pc, #564]	; (80025f8 <UART_SetConfig+0x264>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a88      	ldr	r2, [pc, #544]	; (80025fc <UART_SetConfig+0x268>)
 80023da:	4013      	ands	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a7f      	ldr	r2, [pc, #508]	; (8002600 <UART_SetConfig+0x26c>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7b      	ldr	r2, [pc, #492]	; (8002604 <UART_SetConfig+0x270>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d127      	bne.n	800246a <UART_SetConfig+0xd6>
 800241a:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <UART_SetConfig+0x274>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	2203      	movs	r2, #3
 8002420:	4013      	ands	r3, r2
 8002422:	2b03      	cmp	r3, #3
 8002424:	d00d      	beq.n	8002442 <UART_SetConfig+0xae>
 8002426:	d81b      	bhi.n	8002460 <UART_SetConfig+0xcc>
 8002428:	2b02      	cmp	r3, #2
 800242a:	d014      	beq.n	8002456 <UART_SetConfig+0xc2>
 800242c:	d818      	bhi.n	8002460 <UART_SetConfig+0xcc>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <UART_SetConfig+0xa4>
 8002432:	2b01      	cmp	r3, #1
 8002434:	d00a      	beq.n	800244c <UART_SetConfig+0xb8>
 8002436:	e013      	b.n	8002460 <UART_SetConfig+0xcc>
 8002438:	231f      	movs	r3, #31
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e021      	b.n	8002486 <UART_SetConfig+0xf2>
 8002442:	231f      	movs	r3, #31
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e01c      	b.n	8002486 <UART_SetConfig+0xf2>
 800244c:	231f      	movs	r3, #31
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2204      	movs	r2, #4
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e017      	b.n	8002486 <UART_SetConfig+0xf2>
 8002456:	231f      	movs	r3, #31
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2208      	movs	r2, #8
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	e012      	b.n	8002486 <UART_SetConfig+0xf2>
 8002460:	231f      	movs	r3, #31
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	2210      	movs	r2, #16
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e00d      	b.n	8002486 <UART_SetConfig+0xf2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a67      	ldr	r2, [pc, #412]	; (800260c <UART_SetConfig+0x278>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d104      	bne.n	800247e <UART_SetConfig+0xea>
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e003      	b.n	8002486 <UART_SetConfig+0xf2>
 800247e:	231f      	movs	r3, #31
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2210      	movs	r2, #16
 8002484:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	429a      	cmp	r2, r3
 8002490:	d15d      	bne.n	800254e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002492:	231f      	movs	r3, #31
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d015      	beq.n	80024c8 <UART_SetConfig+0x134>
 800249c:	dc18      	bgt.n	80024d0 <UART_SetConfig+0x13c>
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d00d      	beq.n	80024be <UART_SetConfig+0x12a>
 80024a2:	dc15      	bgt.n	80024d0 <UART_SetConfig+0x13c>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <UART_SetConfig+0x11a>
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d005      	beq.n	80024b8 <UART_SetConfig+0x124>
 80024ac:	e010      	b.n	80024d0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ae:	f7ff fbbd 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 80024b2:	0003      	movs	r3, r0
 80024b4:	61bb      	str	r3, [r7, #24]
        break;
 80024b6:	e012      	b.n	80024de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <UART_SetConfig+0x27c>)
 80024ba:	61bb      	str	r3, [r7, #24]
        break;
 80024bc:	e00f      	b.n	80024de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024be:	f7ff fb47 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	61bb      	str	r3, [r7, #24]
        break;
 80024c6:	e00a      	b.n	80024de <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	61bb      	str	r3, [r7, #24]
        break;
 80024ce:	e006      	b.n	80024de <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024d4:	231e      	movs	r3, #30
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
        break;
 80024dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d100      	bne.n	80024e6 <UART_SetConfig+0x152>
 80024e4:	e07b      	b.n	80025de <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	005a      	lsls	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	18d2      	adds	r2, r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0019      	movs	r1, r3
 80024f8:	0010      	movs	r0, r2
 80024fa:	f7fd fe17 	bl	800012c <__udivsi3>
 80024fe:	0003      	movs	r3, r0
 8002500:	b29b      	uxth	r3, r3
 8002502:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d91c      	bls.n	8002544 <UART_SetConfig+0x1b0>
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	025b      	lsls	r3, r3, #9
 8002510:	429a      	cmp	r2, r3
 8002512:	d217      	bcs.n	8002544 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	b29a      	uxth	r2, r3
 8002518:	200e      	movs	r0, #14
 800251a:	183b      	adds	r3, r7, r0
 800251c:	210f      	movs	r1, #15
 800251e:	438a      	bics	r2, r1
 8002520:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	b29b      	uxth	r3, r3
 8002528:	2207      	movs	r2, #7
 800252a:	4013      	ands	r3, r2
 800252c:	b299      	uxth	r1, r3
 800252e:	183b      	adds	r3, r7, r0
 8002530:	183a      	adds	r2, r7, r0
 8002532:	8812      	ldrh	r2, [r2, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	183a      	adds	r2, r7, r0
 800253e:	8812      	ldrh	r2, [r2, #0]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e04c      	b.n	80025de <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002544:	231e      	movs	r3, #30
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e047      	b.n	80025de <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d015      	beq.n	8002584 <UART_SetConfig+0x1f0>
 8002558:	dc18      	bgt.n	800258c <UART_SetConfig+0x1f8>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d00d      	beq.n	800257a <UART_SetConfig+0x1e6>
 800255e:	dc15      	bgt.n	800258c <UART_SetConfig+0x1f8>
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <UART_SetConfig+0x1d6>
 8002564:	2b02      	cmp	r3, #2
 8002566:	d005      	beq.n	8002574 <UART_SetConfig+0x1e0>
 8002568:	e010      	b.n	800258c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800256a:	f7ff fb5f 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 800256e:	0003      	movs	r3, r0
 8002570:	61bb      	str	r3, [r7, #24]
        break;
 8002572:	e012      	b.n	800259a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <UART_SetConfig+0x27c>)
 8002576:	61bb      	str	r3, [r7, #24]
        break;
 8002578:	e00f      	b.n	800259a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800257a:	f7ff fae9 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 800257e:	0003      	movs	r3, r0
 8002580:	61bb      	str	r3, [r7, #24]
        break;
 8002582:	e00a      	b.n	800259a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	61bb      	str	r3, [r7, #24]
        break;
 800258a:	e006      	b.n	800259a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002590:	231e      	movs	r3, #30
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
        break;
 8002598:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01e      	beq.n	80025de <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	085a      	lsrs	r2, r3, #1
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	18d2      	adds	r2, r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	0019      	movs	r1, r3
 80025b0:	0010      	movs	r0, r2
 80025b2:	f7fd fdbb 	bl	800012c <__udivsi3>
 80025b6:	0003      	movs	r3, r0
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	d909      	bls.n	80025d6 <UART_SetConfig+0x242>
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d204      	bcs.n	80025d6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	e003      	b.n	80025de <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80025d6:	231e      	movs	r3, #30
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80025ea:	231e      	movs	r3, #30
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	781b      	ldrb	r3, [r3, #0]
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b008      	add	sp, #32
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	ffff69f3 	.word	0xffff69f3
 80025fc:	ffffcfff 	.word	0xffffcfff
 8002600:	fffff4ff 	.word	0xfffff4ff
 8002604:	40013800 	.word	0x40013800
 8002608:	40021000 	.word	0x40021000
 800260c:	40004400 	.word	0x40004400
 8002610:	007a1200 	.word	0x007a1200

08002614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	2201      	movs	r2, #1
 8002622:	4013      	ands	r3, r2
 8002624:	d00b      	beq.n	800263e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <UART_AdvFeatureConfig+0x144>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d00b      	beq.n	8002660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a43      	ldr	r2, [pc, #268]	; (800275c <UART_AdvFeatureConfig+0x148>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2204      	movs	r2, #4
 8002666:	4013      	ands	r3, r2
 8002668:	d00b      	beq.n	8002682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <UART_AdvFeatureConfig+0x14c>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2208      	movs	r2, #8
 8002688:	4013      	ands	r3, r2
 800268a:	d00b      	beq.n	80026a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a34      	ldr	r2, [pc, #208]	; (8002764 <UART_AdvFeatureConfig+0x150>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2210      	movs	r2, #16
 80026aa:	4013      	ands	r3, r2
 80026ac:	d00b      	beq.n	80026c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <UART_AdvFeatureConfig+0x154>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	2220      	movs	r2, #32
 80026cc:	4013      	ands	r3, r2
 80026ce:	d00b      	beq.n	80026e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <UART_AdvFeatureConfig+0x158>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	4013      	ands	r3, r2
 80026f0:	d01d      	beq.n	800272e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <UART_AdvFeatureConfig+0x15c>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	035b      	lsls	r3, r3, #13
 8002712:	429a      	cmp	r2, r3
 8002714:	d10b      	bne.n	800272e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a15      	ldr	r2, [pc, #84]	; (8002774 <UART_AdvFeatureConfig+0x160>)
 800271e:	4013      	ands	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	4013      	ands	r3, r2
 8002736:	d00b      	beq.n	8002750 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <UART_AdvFeatureConfig+0x164>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
  }
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	fffdffff 	.word	0xfffdffff
 800275c:	fffeffff 	.word	0xfffeffff
 8002760:	fffbffff 	.word	0xfffbffff
 8002764:	ffff7fff 	.word	0xffff7fff
 8002768:	ffffefff 	.word	0xffffefff
 800276c:	ffffdfff 	.word	0xffffdfff
 8002770:	ffefffff 	.word	0xffefffff
 8002774:	ff9fffff 	.word	0xff9fffff
 8002778:	fff7ffff 	.word	0xfff7ffff

0800277c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af02      	add	r7, sp, #8
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	2100      	movs	r1, #0
 800278a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800278c:	f7fe fb2c 	bl	8000de8 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2208      	movs	r2, #8
 800279c:	4013      	ands	r3, r2
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d10c      	bne.n	80027bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	0391      	lsls	r1, r2, #14
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <UART_CheckIdleState+0x8c>)
 80027ac:	9200      	str	r2, [sp, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f000 f82c 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80027b4:	1e03      	subs	r3, r0, #0
 80027b6:	d001      	beq.n	80027bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e021      	b.n	8002800 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2204      	movs	r2, #4
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d10c      	bne.n	80027e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	03d1      	lsls	r1, r2, #15
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <UART_CheckIdleState+0x8c>)
 80027d4:	9200      	str	r2, [sp, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f000 f818 	bl	800280c <UART_WaitOnFlagUntilTimeout>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e00d      	b.n	8002800 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2274      	movs	r2, #116	; 0x74
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b004      	add	sp, #16
 8002806:	bd80      	pop	{r7, pc}
 8002808:	01ffffff 	.word	0x01ffffff

0800280c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b094      	sub	sp, #80	; 0x50
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281c:	e0a3      	b.n	8002966 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	3301      	adds	r3, #1
 8002822:	d100      	bne.n	8002826 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002824:	e09f      	b.n	8002966 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7fe fadf 	bl	8000de8 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <UART_WaitOnFlagUntilTimeout+0x30>
 8002836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002838:	2b00      	cmp	r3, #0
 800283a:	d13d      	bne.n	80028b8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283c:	f3ef 8310 	mrs	r3, PRIMASK
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
 8002846:	2301      	movs	r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	f383 8810 	msr	PRIMASK, r3
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	494c      	ldr	r1, [pc, #304]	; (8002990 <UART_WaitOnFlagUntilTimeout+0x184>)
 800285e:	400a      	ands	r2, r1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002864:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	f383 8810 	msr	PRIMASK, r3
}
 800286c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286e:	f3ef 8310 	mrs	r3, PRIMASK
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
 8002878:	2301      	movs	r3, #1
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2101      	movs	r1, #1
 8002890:	438a      	bics	r2, r1
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289a:	f383 8810 	msr	PRIMASK, r3
}
 800289e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2274      	movs	r2, #116	; 0x74
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e067      	b.n	8002988 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2204      	movs	r2, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	d050      	beq.n	8002966 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	401a      	ands	r2, r3
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d146      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e2:	f3ef 8310 	mrs	r3, PRIMASK
 80028e6:	613b      	str	r3, [r7, #16]
  return(result);
 80028e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028ec:	2301      	movs	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f383 8810 	msr	PRIMASK, r3
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4923      	ldr	r1, [pc, #140]	; (8002990 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f383 8810 	msr	PRIMASK, r3
}
 8002912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002914:	f3ef 8310 	mrs	r3, PRIMASK
 8002918:	61fb      	str	r3, [r7, #28]
  return(result);
 800291a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
 800291e:	2301      	movs	r3, #1
 8002920:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	438a      	bics	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f383 8810 	msr	PRIMASK, r3
}
 8002944:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	2120      	movs	r1, #32
 8002958:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2274      	movs	r2, #116	; 0x74
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e010      	b.n	8002988 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	425a      	negs	r2, r3
 8002976:	4153      	adcs	r3, r2
 8002978:	b2db      	uxtb	r3, r3
 800297a:	001a      	movs	r2, r3
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d100      	bne.n	8002986 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002984:	e74b      	b.n	800281e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b014      	add	sp, #80	; 0x50
 800298e:	bd80      	pop	{r7, pc}
 8002990:	fffffe5f 	.word	0xfffffe5f

08002994 <__errno>:
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <__errno+0x8>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	4770      	bx	lr
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	2000002c 	.word	0x2000002c

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	2600      	movs	r6, #0
 80029a4:	4d0c      	ldr	r5, [pc, #48]	; (80029d8 <__libc_init_array+0x38>)
 80029a6:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a8:	1b64      	subs	r4, r4, r5
 80029aa:	10a4      	asrs	r4, r4, #2
 80029ac:	42a6      	cmp	r6, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	2600      	movs	r6, #0
 80029b2:	f000 fc8b 	bl	80032cc <_init>
 80029b6:	4d0a      	ldr	r5, [pc, #40]	; (80029e0 <__libc_init_array+0x40>)
 80029b8:	4c0a      	ldr	r4, [pc, #40]	; (80029e4 <__libc_init_array+0x44>)
 80029ba:	1b64      	subs	r4, r4, r5
 80029bc:	10a4      	asrs	r4, r4, #2
 80029be:	42a6      	cmp	r6, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	00b3      	lsls	r3, r6, #2
 80029c6:	58eb      	ldr	r3, [r5, r3]
 80029c8:	4798      	blx	r3
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	00b3      	lsls	r3, r6, #2
 80029d0:	58eb      	ldr	r3, [r5, r3]
 80029d2:	4798      	blx	r3
 80029d4:	3601      	adds	r6, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	080033fc 	.word	0x080033fc
 80029dc:	080033fc 	.word	0x080033fc
 80029e0:	080033fc 	.word	0x080033fc
 80029e4:	08003400 	.word	0x08003400

080029e8 <memset>:
 80029e8:	0003      	movs	r3, r0
 80029ea:	1882      	adds	r2, r0, r2
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	7019      	strb	r1, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <siprintf>:
 80029f8:	b40e      	push	{r1, r2, r3}
 80029fa:	b500      	push	{lr}
 80029fc:	490b      	ldr	r1, [pc, #44]	; (8002a2c <siprintf+0x34>)
 80029fe:	b09c      	sub	sp, #112	; 0x70
 8002a00:	ab1d      	add	r3, sp, #116	; 0x74
 8002a02:	9002      	str	r0, [sp, #8]
 8002a04:	9006      	str	r0, [sp, #24]
 8002a06:	9107      	str	r1, [sp, #28]
 8002a08:	9104      	str	r1, [sp, #16]
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <siprintf+0x38>)
 8002a0c:	4909      	ldr	r1, [pc, #36]	; (8002a34 <siprintf+0x3c>)
 8002a0e:	cb04      	ldmia	r3!, {r2}
 8002a10:	9105      	str	r1, [sp, #20]
 8002a12:	6800      	ldr	r0, [r0, #0]
 8002a14:	a902      	add	r1, sp, #8
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	f000 f870 	bl	8002afc <_svfiprintf_r>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9a02      	ldr	r2, [sp, #8]
 8002a20:	7013      	strb	r3, [r2, #0]
 8002a22:	b01c      	add	sp, #112	; 0x70
 8002a24:	bc08      	pop	{r3}
 8002a26:	b003      	add	sp, #12
 8002a28:	4718      	bx	r3
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	7fffffff 	.word	0x7fffffff
 8002a30:	2000002c 	.word	0x2000002c
 8002a34:	ffff0208 	.word	0xffff0208

08002a38 <__ssputs_r>:
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	688e      	ldr	r6, [r1, #8]
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	0007      	movs	r7, r0
 8002a40:	000c      	movs	r4, r1
 8002a42:	9203      	str	r2, [sp, #12]
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	429e      	cmp	r6, r3
 8002a48:	d83c      	bhi.n	8002ac4 <__ssputs_r+0x8c>
 8002a4a:	2390      	movs	r3, #144	; 0x90
 8002a4c:	898a      	ldrh	r2, [r1, #12]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	421a      	tst	r2, r3
 8002a52:	d034      	beq.n	8002abe <__ssputs_r+0x86>
 8002a54:	6909      	ldr	r1, [r1, #16]
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	6960      	ldr	r0, [r4, #20]
 8002a5a:	1a5b      	subs	r3, r3, r1
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	2303      	movs	r3, #3
 8002a60:	4343      	muls	r3, r0
 8002a62:	0fdd      	lsrs	r5, r3, #31
 8002a64:	18ed      	adds	r5, r5, r3
 8002a66:	9b01      	ldr	r3, [sp, #4]
 8002a68:	9802      	ldr	r0, [sp, #8]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	181b      	adds	r3, r3, r0
 8002a6e:	106d      	asrs	r5, r5, #1
 8002a70:	42ab      	cmp	r3, r5
 8002a72:	d900      	bls.n	8002a76 <__ssputs_r+0x3e>
 8002a74:	001d      	movs	r5, r3
 8002a76:	0553      	lsls	r3, r2, #21
 8002a78:	d532      	bpl.n	8002ae0 <__ssputs_r+0xa8>
 8002a7a:	0029      	movs	r1, r5
 8002a7c:	0038      	movs	r0, r7
 8002a7e:	f000 fb53 	bl	8003128 <_malloc_r>
 8002a82:	1e06      	subs	r6, r0, #0
 8002a84:	d109      	bne.n	8002a9a <__ssputs_r+0x62>
 8002a86:	230c      	movs	r3, #12
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	2340      	movs	r3, #64	; 0x40
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	89a2      	ldrh	r2, [r4, #12]
 8002a90:	4240      	negs	r0, r0
 8002a92:	4313      	orrs	r3, r2
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	b005      	add	sp, #20
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9a:	9a02      	ldr	r2, [sp, #8]
 8002a9c:	6921      	ldr	r1, [r4, #16]
 8002a9e:	f000 faba 	bl	8003016 <memcpy>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <__ssputs_r+0xc0>)
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	9b02      	ldr	r3, [sp, #8]
 8002ab0:	6126      	str	r6, [r4, #16]
 8002ab2:	18f6      	adds	r6, r6, r3
 8002ab4:	6026      	str	r6, [r4, #0]
 8002ab6:	6165      	str	r5, [r4, #20]
 8002ab8:	9e01      	ldr	r6, [sp, #4]
 8002aba:	1aed      	subs	r5, r5, r3
 8002abc:	60a5      	str	r5, [r4, #8]
 8002abe:	9b01      	ldr	r3, [sp, #4]
 8002ac0:	429e      	cmp	r6, r3
 8002ac2:	d900      	bls.n	8002ac6 <__ssputs_r+0x8e>
 8002ac4:	9e01      	ldr	r6, [sp, #4]
 8002ac6:	0032      	movs	r2, r6
 8002ac8:	9903      	ldr	r1, [sp, #12]
 8002aca:	6820      	ldr	r0, [r4, #0]
 8002acc:	f000 faac 	bl	8003028 <memmove>
 8002ad0:	68a3      	ldr	r3, [r4, #8]
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	1b9b      	subs	r3, r3, r6
 8002ad6:	60a3      	str	r3, [r4, #8]
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	199e      	adds	r6, r3, r6
 8002adc:	6026      	str	r6, [r4, #0]
 8002ade:	e7da      	b.n	8002a96 <__ssputs_r+0x5e>
 8002ae0:	002a      	movs	r2, r5
 8002ae2:	0038      	movs	r0, r7
 8002ae4:	f000 fb96 	bl	8003214 <_realloc_r>
 8002ae8:	1e06      	subs	r6, r0, #0
 8002aea:	d1e0      	bne.n	8002aae <__ssputs_r+0x76>
 8002aec:	0038      	movs	r0, r7
 8002aee:	6921      	ldr	r1, [r4, #16]
 8002af0:	f000 faae 	bl	8003050 <_free_r>
 8002af4:	e7c7      	b.n	8002a86 <__ssputs_r+0x4e>
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	fffffb7f 	.word	0xfffffb7f

08002afc <_svfiprintf_r>:
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b0a1      	sub	sp, #132	; 0x84
 8002b00:	9003      	str	r0, [sp, #12]
 8002b02:	001d      	movs	r5, r3
 8002b04:	898b      	ldrh	r3, [r1, #12]
 8002b06:	000f      	movs	r7, r1
 8002b08:	0016      	movs	r6, r2
 8002b0a:	061b      	lsls	r3, r3, #24
 8002b0c:	d511      	bpl.n	8002b32 <_svfiprintf_r+0x36>
 8002b0e:	690b      	ldr	r3, [r1, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10e      	bne.n	8002b32 <_svfiprintf_r+0x36>
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	f000 fb07 	bl	8003128 <_malloc_r>
 8002b1a:	6038      	str	r0, [r7, #0]
 8002b1c:	6138      	str	r0, [r7, #16]
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d105      	bne.n	8002b2e <_svfiprintf_r+0x32>
 8002b22:	230c      	movs	r3, #12
 8002b24:	9a03      	ldr	r2, [sp, #12]
 8002b26:	3801      	subs	r0, #1
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	b021      	add	sp, #132	; 0x84
 8002b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2e:	2340      	movs	r3, #64	; 0x40
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	2300      	movs	r3, #0
 8002b34:	ac08      	add	r4, sp, #32
 8002b36:	6163      	str	r3, [r4, #20]
 8002b38:	3320      	adds	r3, #32
 8002b3a:	7663      	strb	r3, [r4, #25]
 8002b3c:	3310      	adds	r3, #16
 8002b3e:	76a3      	strb	r3, [r4, #26]
 8002b40:	9507      	str	r5, [sp, #28]
 8002b42:	0035      	movs	r5, r6
 8002b44:	782b      	ldrb	r3, [r5, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <_svfiprintf_r+0x52>
 8002b4a:	2b25      	cmp	r3, #37	; 0x25
 8002b4c:	d147      	bne.n	8002bde <_svfiprintf_r+0xe2>
 8002b4e:	1bab      	subs	r3, r5, r6
 8002b50:	9305      	str	r3, [sp, #20]
 8002b52:	42b5      	cmp	r5, r6
 8002b54:	d00c      	beq.n	8002b70 <_svfiprintf_r+0x74>
 8002b56:	0032      	movs	r2, r6
 8002b58:	0039      	movs	r1, r7
 8002b5a:	9803      	ldr	r0, [sp, #12]
 8002b5c:	f7ff ff6c 	bl	8002a38 <__ssputs_r>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d100      	bne.n	8002b66 <_svfiprintf_r+0x6a>
 8002b64:	e0ae      	b.n	8002cc4 <_svfiprintf_r+0x1c8>
 8002b66:	6962      	ldr	r2, [r4, #20]
 8002b68:	9b05      	ldr	r3, [sp, #20]
 8002b6a:	4694      	mov	ip, r2
 8002b6c:	4463      	add	r3, ip
 8002b6e:	6163      	str	r3, [r4, #20]
 8002b70:	782b      	ldrb	r3, [r5, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d100      	bne.n	8002b78 <_svfiprintf_r+0x7c>
 8002b76:	e0a5      	b.n	8002cc4 <_svfiprintf_r+0x1c8>
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4252      	negs	r2, r2
 8002b7e:	6062      	str	r2, [r4, #4]
 8002b80:	a904      	add	r1, sp, #16
 8002b82:	3254      	adds	r2, #84	; 0x54
 8002b84:	1852      	adds	r2, r2, r1
 8002b86:	1c6e      	adds	r6, r5, #1
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	60e3      	str	r3, [r4, #12]
 8002b8c:	60a3      	str	r3, [r4, #8]
 8002b8e:	7013      	strb	r3, [r2, #0]
 8002b90:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b92:	2205      	movs	r2, #5
 8002b94:	7831      	ldrb	r1, [r6, #0]
 8002b96:	4854      	ldr	r0, [pc, #336]	; (8002ce8 <_svfiprintf_r+0x1ec>)
 8002b98:	f000 fa32 	bl	8003000 <memchr>
 8002b9c:	1c75      	adds	r5, r6, #1
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d11f      	bne.n	8002be2 <_svfiprintf_r+0xe6>
 8002ba2:	6822      	ldr	r2, [r4, #0]
 8002ba4:	06d3      	lsls	r3, r2, #27
 8002ba6:	d504      	bpl.n	8002bb2 <_svfiprintf_r+0xb6>
 8002ba8:	2353      	movs	r3, #83	; 0x53
 8002baa:	a904      	add	r1, sp, #16
 8002bac:	185b      	adds	r3, r3, r1
 8002bae:	2120      	movs	r1, #32
 8002bb0:	7019      	strb	r1, [r3, #0]
 8002bb2:	0713      	lsls	r3, r2, #28
 8002bb4:	d504      	bpl.n	8002bc0 <_svfiprintf_r+0xc4>
 8002bb6:	2353      	movs	r3, #83	; 0x53
 8002bb8:	a904      	add	r1, sp, #16
 8002bba:	185b      	adds	r3, r3, r1
 8002bbc:	212b      	movs	r1, #43	; 0x2b
 8002bbe:	7019      	strb	r1, [r3, #0]
 8002bc0:	7833      	ldrb	r3, [r6, #0]
 8002bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc4:	d016      	beq.n	8002bf4 <_svfiprintf_r+0xf8>
 8002bc6:	0035      	movs	r5, r6
 8002bc8:	2100      	movs	r1, #0
 8002bca:	200a      	movs	r0, #10
 8002bcc:	68e3      	ldr	r3, [r4, #12]
 8002bce:	782a      	ldrb	r2, [r5, #0]
 8002bd0:	1c6e      	adds	r6, r5, #1
 8002bd2:	3a30      	subs	r2, #48	; 0x30
 8002bd4:	2a09      	cmp	r2, #9
 8002bd6:	d94e      	bls.n	8002c76 <_svfiprintf_r+0x17a>
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	d111      	bne.n	8002c00 <_svfiprintf_r+0x104>
 8002bdc:	e017      	b.n	8002c0e <_svfiprintf_r+0x112>
 8002bde:	3501      	adds	r5, #1
 8002be0:	e7b0      	b.n	8002b44 <_svfiprintf_r+0x48>
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <_svfiprintf_r+0x1ec>)
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	1ac0      	subs	r0, r0, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	4083      	lsls	r3, r0
 8002bec:	4313      	orrs	r3, r2
 8002bee:	002e      	movs	r6, r5
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	e7ce      	b.n	8002b92 <_svfiprintf_r+0x96>
 8002bf4:	9b07      	ldr	r3, [sp, #28]
 8002bf6:	1d19      	adds	r1, r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	9107      	str	r1, [sp, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db01      	blt.n	8002c04 <_svfiprintf_r+0x108>
 8002c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c02:	e004      	b.n	8002c0e <_svfiprintf_r+0x112>
 8002c04:	425b      	negs	r3, r3
 8002c06:	60e3      	str	r3, [r4, #12]
 8002c08:	2302      	movs	r3, #2
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	6023      	str	r3, [r4, #0]
 8002c0e:	782b      	ldrb	r3, [r5, #0]
 8002c10:	2b2e      	cmp	r3, #46	; 0x2e
 8002c12:	d10a      	bne.n	8002c2a <_svfiprintf_r+0x12e>
 8002c14:	786b      	ldrb	r3, [r5, #1]
 8002c16:	2b2a      	cmp	r3, #42	; 0x2a
 8002c18:	d135      	bne.n	8002c86 <_svfiprintf_r+0x18a>
 8002c1a:	9b07      	ldr	r3, [sp, #28]
 8002c1c:	3502      	adds	r5, #2
 8002c1e:	1d1a      	adds	r2, r3, #4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	9207      	str	r2, [sp, #28]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db2b      	blt.n	8002c80 <_svfiprintf_r+0x184>
 8002c28:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2a:	4e30      	ldr	r6, [pc, #192]	; (8002cec <_svfiprintf_r+0x1f0>)
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	0030      	movs	r0, r6
 8002c30:	7829      	ldrb	r1, [r5, #0]
 8002c32:	f000 f9e5 	bl	8003000 <memchr>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d006      	beq.n	8002c48 <_svfiprintf_r+0x14c>
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	1b80      	subs	r0, r0, r6
 8002c3e:	4083      	lsls	r3, r0
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	3501      	adds	r5, #1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	6023      	str	r3, [r4, #0]
 8002c48:	7829      	ldrb	r1, [r5, #0]
 8002c4a:	2206      	movs	r2, #6
 8002c4c:	4828      	ldr	r0, [pc, #160]	; (8002cf0 <_svfiprintf_r+0x1f4>)
 8002c4e:	1c6e      	adds	r6, r5, #1
 8002c50:	7621      	strb	r1, [r4, #24]
 8002c52:	f000 f9d5 	bl	8003000 <memchr>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d03c      	beq.n	8002cd4 <_svfiprintf_r+0x1d8>
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <_svfiprintf_r+0x1f8>)
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d125      	bne.n	8002cac <_svfiprintf_r+0x1b0>
 8002c60:	2207      	movs	r2, #7
 8002c62:	9b07      	ldr	r3, [sp, #28]
 8002c64:	3307      	adds	r3, #7
 8002c66:	4393      	bics	r3, r2
 8002c68:	3308      	adds	r3, #8
 8002c6a:	9307      	str	r3, [sp, #28]
 8002c6c:	6963      	ldr	r3, [r4, #20]
 8002c6e:	9a04      	ldr	r2, [sp, #16]
 8002c70:	189b      	adds	r3, r3, r2
 8002c72:	6163      	str	r3, [r4, #20]
 8002c74:	e765      	b.n	8002b42 <_svfiprintf_r+0x46>
 8002c76:	4343      	muls	r3, r0
 8002c78:	0035      	movs	r5, r6
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	189b      	adds	r3, r3, r2
 8002c7e:	e7a6      	b.n	8002bce <_svfiprintf_r+0xd2>
 8002c80:	2301      	movs	r3, #1
 8002c82:	425b      	negs	r3, r3
 8002c84:	e7d0      	b.n	8002c28 <_svfiprintf_r+0x12c>
 8002c86:	2300      	movs	r3, #0
 8002c88:	200a      	movs	r0, #10
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	3501      	adds	r5, #1
 8002c8e:	6063      	str	r3, [r4, #4]
 8002c90:	7829      	ldrb	r1, [r5, #0]
 8002c92:	1c6e      	adds	r6, r5, #1
 8002c94:	3930      	subs	r1, #48	; 0x30
 8002c96:	2909      	cmp	r1, #9
 8002c98:	d903      	bls.n	8002ca2 <_svfiprintf_r+0x1a6>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0c5      	beq.n	8002c2a <_svfiprintf_r+0x12e>
 8002c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8002ca0:	e7c3      	b.n	8002c2a <_svfiprintf_r+0x12e>
 8002ca2:	4342      	muls	r2, r0
 8002ca4:	0035      	movs	r5, r6
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	1852      	adds	r2, r2, r1
 8002caa:	e7f1      	b.n	8002c90 <_svfiprintf_r+0x194>
 8002cac:	ab07      	add	r3, sp, #28
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	003a      	movs	r2, r7
 8002cb2:	0021      	movs	r1, r4
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_svfiprintf_r+0x1fc>)
 8002cb6:	9803      	ldr	r0, [sp, #12]
 8002cb8:	e000      	b.n	8002cbc <_svfiprintf_r+0x1c0>
 8002cba:	bf00      	nop
 8002cbc:	9004      	str	r0, [sp, #16]
 8002cbe:	9b04      	ldr	r3, [sp, #16]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	d1d3      	bne.n	8002c6c <_svfiprintf_r+0x170>
 8002cc4:	89bb      	ldrh	r3, [r7, #12]
 8002cc6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002cc8:	065b      	lsls	r3, r3, #25
 8002cca:	d400      	bmi.n	8002cce <_svfiprintf_r+0x1d2>
 8002ccc:	e72d      	b.n	8002b2a <_svfiprintf_r+0x2e>
 8002cce:	2001      	movs	r0, #1
 8002cd0:	4240      	negs	r0, r0
 8002cd2:	e72a      	b.n	8002b2a <_svfiprintf_r+0x2e>
 8002cd4:	ab07      	add	r3, sp, #28
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	003a      	movs	r2, r7
 8002cda:	0021      	movs	r1, r4
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <_svfiprintf_r+0x1fc>)
 8002cde:	9803      	ldr	r0, [sp, #12]
 8002ce0:	f000 f87c 	bl	8002ddc <_printf_i>
 8002ce4:	e7ea      	b.n	8002cbc <_svfiprintf_r+0x1c0>
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	080033c8 	.word	0x080033c8
 8002cec:	080033ce 	.word	0x080033ce
 8002cf0:	080033d2 	.word	0x080033d2
 8002cf4:	00000000 	.word	0x00000000
 8002cf8:	08002a39 	.word	0x08002a39

08002cfc <_printf_common>:
 8002cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cfe:	0015      	movs	r5, r2
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	688a      	ldr	r2, [r1, #8]
 8002d04:	690b      	ldr	r3, [r1, #16]
 8002d06:	000c      	movs	r4, r1
 8002d08:	9000      	str	r0, [sp, #0]
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	da00      	bge.n	8002d10 <_printf_common+0x14>
 8002d0e:	0013      	movs	r3, r2
 8002d10:	0022      	movs	r2, r4
 8002d12:	602b      	str	r3, [r5, #0]
 8002d14:	3243      	adds	r2, #67	; 0x43
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	d001      	beq.n	8002d20 <_printf_common+0x24>
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	602b      	str	r3, [r5, #0]
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	069b      	lsls	r3, r3, #26
 8002d24:	d502      	bpl.n	8002d2c <_printf_common+0x30>
 8002d26:	682b      	ldr	r3, [r5, #0]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	602b      	str	r3, [r5, #0]
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	2306      	movs	r3, #6
 8002d30:	0017      	movs	r7, r2
 8002d32:	401f      	ands	r7, r3
 8002d34:	421a      	tst	r2, r3
 8002d36:	d027      	beq.n	8002d88 <_printf_common+0x8c>
 8002d38:	0023      	movs	r3, r4
 8002d3a:	3343      	adds	r3, #67	; 0x43
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	1e5a      	subs	r2, r3, #1
 8002d40:	4193      	sbcs	r3, r2
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	0692      	lsls	r2, r2, #26
 8002d46:	d430      	bmi.n	8002daa <_printf_common+0xae>
 8002d48:	0022      	movs	r2, r4
 8002d4a:	9901      	ldr	r1, [sp, #4]
 8002d4c:	9800      	ldr	r0, [sp, #0]
 8002d4e:	9e08      	ldr	r6, [sp, #32]
 8002d50:	3243      	adds	r2, #67	; 0x43
 8002d52:	47b0      	blx	r6
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d025      	beq.n	8002da4 <_printf_common+0xa8>
 8002d58:	2306      	movs	r3, #6
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	682a      	ldr	r2, [r5, #0]
 8002d5e:	68e1      	ldr	r1, [r4, #12]
 8002d60:	2500      	movs	r5, #0
 8002d62:	4003      	ands	r3, r0
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d103      	bne.n	8002d70 <_printf_common+0x74>
 8002d68:	1a8d      	subs	r5, r1, r2
 8002d6a:	43eb      	mvns	r3, r5
 8002d6c:	17db      	asrs	r3, r3, #31
 8002d6e:	401d      	ands	r5, r3
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	6922      	ldr	r2, [r4, #16]
 8002d74:	4293      	cmp	r3, r2
 8002d76:	dd01      	ble.n	8002d7c <_printf_common+0x80>
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	18ed      	adds	r5, r5, r3
 8002d7c:	2700      	movs	r7, #0
 8002d7e:	42bd      	cmp	r5, r7
 8002d80:	d120      	bne.n	8002dc4 <_printf_common+0xc8>
 8002d82:	2000      	movs	r0, #0
 8002d84:	e010      	b.n	8002da8 <_printf_common+0xac>
 8002d86:	3701      	adds	r7, #1
 8002d88:	68e3      	ldr	r3, [r4, #12]
 8002d8a:	682a      	ldr	r2, [r5, #0]
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	42bb      	cmp	r3, r7
 8002d90:	ddd2      	ble.n	8002d38 <_printf_common+0x3c>
 8002d92:	0022      	movs	r2, r4
 8002d94:	2301      	movs	r3, #1
 8002d96:	9901      	ldr	r1, [sp, #4]
 8002d98:	9800      	ldr	r0, [sp, #0]
 8002d9a:	9e08      	ldr	r6, [sp, #32]
 8002d9c:	3219      	adds	r2, #25
 8002d9e:	47b0      	blx	r6
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d1f0      	bne.n	8002d86 <_printf_common+0x8a>
 8002da4:	2001      	movs	r0, #1
 8002da6:	4240      	negs	r0, r0
 8002da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002daa:	2030      	movs	r0, #48	; 0x30
 8002dac:	18e1      	adds	r1, r4, r3
 8002dae:	3143      	adds	r1, #67	; 0x43
 8002db0:	7008      	strb	r0, [r1, #0]
 8002db2:	0021      	movs	r1, r4
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	3145      	adds	r1, #69	; 0x45
 8002db8:	7809      	ldrb	r1, [r1, #0]
 8002dba:	18a2      	adds	r2, r4, r2
 8002dbc:	3243      	adds	r2, #67	; 0x43
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	7011      	strb	r1, [r2, #0]
 8002dc2:	e7c1      	b.n	8002d48 <_printf_common+0x4c>
 8002dc4:	0022      	movs	r2, r4
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	9901      	ldr	r1, [sp, #4]
 8002dca:	9800      	ldr	r0, [sp, #0]
 8002dcc:	9e08      	ldr	r6, [sp, #32]
 8002dce:	321a      	adds	r2, #26
 8002dd0:	47b0      	blx	r6
 8002dd2:	1c43      	adds	r3, r0, #1
 8002dd4:	d0e6      	beq.n	8002da4 <_printf_common+0xa8>
 8002dd6:	3701      	adds	r7, #1
 8002dd8:	e7d1      	b.n	8002d7e <_printf_common+0x82>
	...

08002ddc <_printf_i>:
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	b08b      	sub	sp, #44	; 0x2c
 8002de0:	9206      	str	r2, [sp, #24]
 8002de2:	000a      	movs	r2, r1
 8002de4:	3243      	adds	r2, #67	; 0x43
 8002de6:	9307      	str	r3, [sp, #28]
 8002de8:	9005      	str	r0, [sp, #20]
 8002dea:	9204      	str	r2, [sp, #16]
 8002dec:	7e0a      	ldrb	r2, [r1, #24]
 8002dee:	000c      	movs	r4, r1
 8002df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002df2:	2a78      	cmp	r2, #120	; 0x78
 8002df4:	d807      	bhi.n	8002e06 <_printf_i+0x2a>
 8002df6:	2a62      	cmp	r2, #98	; 0x62
 8002df8:	d809      	bhi.n	8002e0e <_printf_i+0x32>
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	d100      	bne.n	8002e00 <_printf_i+0x24>
 8002dfe:	e0c1      	b.n	8002f84 <_printf_i+0x1a8>
 8002e00:	2a58      	cmp	r2, #88	; 0x58
 8002e02:	d100      	bne.n	8002e06 <_printf_i+0x2a>
 8002e04:	e08c      	b.n	8002f20 <_printf_i+0x144>
 8002e06:	0026      	movs	r6, r4
 8002e08:	3642      	adds	r6, #66	; 0x42
 8002e0a:	7032      	strb	r2, [r6, #0]
 8002e0c:	e022      	b.n	8002e54 <_printf_i+0x78>
 8002e0e:	0010      	movs	r0, r2
 8002e10:	3863      	subs	r0, #99	; 0x63
 8002e12:	2815      	cmp	r0, #21
 8002e14:	d8f7      	bhi.n	8002e06 <_printf_i+0x2a>
 8002e16:	f7fd f97f 	bl	8000118 <__gnu_thumb1_case_shi>
 8002e1a:	0016      	.short	0x0016
 8002e1c:	fff6001f 	.word	0xfff6001f
 8002e20:	fff6fff6 	.word	0xfff6fff6
 8002e24:	001ffff6 	.word	0x001ffff6
 8002e28:	fff6fff6 	.word	0xfff6fff6
 8002e2c:	fff6fff6 	.word	0xfff6fff6
 8002e30:	003600a8 	.word	0x003600a8
 8002e34:	fff6009a 	.word	0xfff6009a
 8002e38:	00b9fff6 	.word	0x00b9fff6
 8002e3c:	0036fff6 	.word	0x0036fff6
 8002e40:	fff6fff6 	.word	0xfff6fff6
 8002e44:	009e      	.short	0x009e
 8002e46:	0026      	movs	r6, r4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	3642      	adds	r6, #66	; 0x42
 8002e4c:	1d11      	adds	r1, r2, #4
 8002e4e:	6019      	str	r1, [r3, #0]
 8002e50:	6813      	ldr	r3, [r2, #0]
 8002e52:	7033      	strb	r3, [r6, #0]
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0a7      	b.n	8002fa8 <_printf_i+0x1cc>
 8002e58:	6808      	ldr	r0, [r1, #0]
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	1d0a      	adds	r2, r1, #4
 8002e5e:	0605      	lsls	r5, r0, #24
 8002e60:	d50b      	bpl.n	8002e7a <_printf_i+0x9e>
 8002e62:	680d      	ldr	r5, [r1, #0]
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	da03      	bge.n	8002e72 <_printf_i+0x96>
 8002e6a:	232d      	movs	r3, #45	; 0x2d
 8002e6c:	9a04      	ldr	r2, [sp, #16]
 8002e6e:	426d      	negs	r5, r5
 8002e70:	7013      	strb	r3, [r2, #0]
 8002e72:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <_printf_i+0x21c>)
 8002e74:	270a      	movs	r7, #10
 8002e76:	9303      	str	r3, [sp, #12]
 8002e78:	e01b      	b.n	8002eb2 <_printf_i+0xd6>
 8002e7a:	680d      	ldr	r5, [r1, #0]
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	0641      	lsls	r1, r0, #25
 8002e80:	d5f1      	bpl.n	8002e66 <_printf_i+0x8a>
 8002e82:	b22d      	sxth	r5, r5
 8002e84:	e7ef      	b.n	8002e66 <_printf_i+0x8a>
 8002e86:	680d      	ldr	r5, [r1, #0]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	1d08      	adds	r0, r1, #4
 8002e8c:	6018      	str	r0, [r3, #0]
 8002e8e:	062e      	lsls	r6, r5, #24
 8002e90:	d501      	bpl.n	8002e96 <_printf_i+0xba>
 8002e92:	680d      	ldr	r5, [r1, #0]
 8002e94:	e003      	b.n	8002e9e <_printf_i+0xc2>
 8002e96:	066d      	lsls	r5, r5, #25
 8002e98:	d5fb      	bpl.n	8002e92 <_printf_i+0xb6>
 8002e9a:	680d      	ldr	r5, [r1, #0]
 8002e9c:	b2ad      	uxth	r5, r5
 8002e9e:	4b56      	ldr	r3, [pc, #344]	; (8002ff8 <_printf_i+0x21c>)
 8002ea0:	2708      	movs	r7, #8
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	2a6f      	cmp	r2, #111	; 0x6f
 8002ea6:	d000      	beq.n	8002eaa <_printf_i+0xce>
 8002ea8:	3702      	adds	r7, #2
 8002eaa:	0023      	movs	r3, r4
 8002eac:	2200      	movs	r2, #0
 8002eae:	3343      	adds	r3, #67	; 0x43
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	6863      	ldr	r3, [r4, #4]
 8002eb4:	60a3      	str	r3, [r4, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db03      	blt.n	8002ec2 <_printf_i+0xe6>
 8002eba:	2204      	movs	r2, #4
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	4391      	bics	r1, r2
 8002ec0:	6021      	str	r1, [r4, #0]
 8002ec2:	2d00      	cmp	r5, #0
 8002ec4:	d102      	bne.n	8002ecc <_printf_i+0xf0>
 8002ec6:	9e04      	ldr	r6, [sp, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <_printf_i+0x10a>
 8002ecc:	9e04      	ldr	r6, [sp, #16]
 8002ece:	0028      	movs	r0, r5
 8002ed0:	0039      	movs	r1, r7
 8002ed2:	f7fd f9b1 	bl	8000238 <__aeabi_uidivmod>
 8002ed6:	9b03      	ldr	r3, [sp, #12]
 8002ed8:	3e01      	subs	r6, #1
 8002eda:	5c5b      	ldrb	r3, [r3, r1]
 8002edc:	7033      	strb	r3, [r6, #0]
 8002ede:	002b      	movs	r3, r5
 8002ee0:	0005      	movs	r5, r0
 8002ee2:	429f      	cmp	r7, r3
 8002ee4:	d9f3      	bls.n	8002ece <_printf_i+0xf2>
 8002ee6:	2f08      	cmp	r7, #8
 8002ee8:	d109      	bne.n	8002efe <_printf_i+0x122>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	07db      	lsls	r3, r3, #31
 8002eee:	d506      	bpl.n	8002efe <_printf_i+0x122>
 8002ef0:	6863      	ldr	r3, [r4, #4]
 8002ef2:	6922      	ldr	r2, [r4, #16]
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	dc02      	bgt.n	8002efe <_printf_i+0x122>
 8002ef8:	2330      	movs	r3, #48	; 0x30
 8002efa:	3e01      	subs	r6, #1
 8002efc:	7033      	strb	r3, [r6, #0]
 8002efe:	9b04      	ldr	r3, [sp, #16]
 8002f00:	1b9b      	subs	r3, r3, r6
 8002f02:	6123      	str	r3, [r4, #16]
 8002f04:	9b07      	ldr	r3, [sp, #28]
 8002f06:	0021      	movs	r1, r4
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	9805      	ldr	r0, [sp, #20]
 8002f0c:	9b06      	ldr	r3, [sp, #24]
 8002f0e:	aa09      	add	r2, sp, #36	; 0x24
 8002f10:	f7ff fef4 	bl	8002cfc <_printf_common>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d14c      	bne.n	8002fb2 <_printf_i+0x1d6>
 8002f18:	2001      	movs	r0, #1
 8002f1a:	4240      	negs	r0, r0
 8002f1c:	b00b      	add	sp, #44	; 0x2c
 8002f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f20:	3145      	adds	r1, #69	; 0x45
 8002f22:	700a      	strb	r2, [r1, #0]
 8002f24:	4a34      	ldr	r2, [pc, #208]	; (8002ff8 <_printf_i+0x21c>)
 8002f26:	9203      	str	r2, [sp, #12]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	6821      	ldr	r1, [r4, #0]
 8002f2c:	ca20      	ldmia	r2!, {r5}
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	0608      	lsls	r0, r1, #24
 8002f32:	d516      	bpl.n	8002f62 <_printf_i+0x186>
 8002f34:	07cb      	lsls	r3, r1, #31
 8002f36:	d502      	bpl.n	8002f3e <_printf_i+0x162>
 8002f38:	2320      	movs	r3, #32
 8002f3a:	4319      	orrs	r1, r3
 8002f3c:	6021      	str	r1, [r4, #0]
 8002f3e:	2710      	movs	r7, #16
 8002f40:	2d00      	cmp	r5, #0
 8002f42:	d1b2      	bne.n	8002eaa <_printf_i+0xce>
 8002f44:	2320      	movs	r3, #32
 8002f46:	6822      	ldr	r2, [r4, #0]
 8002f48:	439a      	bics	r2, r3
 8002f4a:	6022      	str	r2, [r4, #0]
 8002f4c:	e7ad      	b.n	8002eaa <_printf_i+0xce>
 8002f4e:	2220      	movs	r2, #32
 8002f50:	6809      	ldr	r1, [r1, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	6022      	str	r2, [r4, #0]
 8002f56:	0022      	movs	r2, r4
 8002f58:	2178      	movs	r1, #120	; 0x78
 8002f5a:	3245      	adds	r2, #69	; 0x45
 8002f5c:	7011      	strb	r1, [r2, #0]
 8002f5e:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <_printf_i+0x220>)
 8002f60:	e7e1      	b.n	8002f26 <_printf_i+0x14a>
 8002f62:	0648      	lsls	r0, r1, #25
 8002f64:	d5e6      	bpl.n	8002f34 <_printf_i+0x158>
 8002f66:	b2ad      	uxth	r5, r5
 8002f68:	e7e4      	b.n	8002f34 <_printf_i+0x158>
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	680d      	ldr	r5, [r1, #0]
 8002f6e:	1d10      	adds	r0, r2, #4
 8002f70:	6949      	ldr	r1, [r1, #20]
 8002f72:	6018      	str	r0, [r3, #0]
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	062e      	lsls	r6, r5, #24
 8002f78:	d501      	bpl.n	8002f7e <_printf_i+0x1a2>
 8002f7a:	6019      	str	r1, [r3, #0]
 8002f7c:	e002      	b.n	8002f84 <_printf_i+0x1a8>
 8002f7e:	066d      	lsls	r5, r5, #25
 8002f80:	d5fb      	bpl.n	8002f7a <_printf_i+0x19e>
 8002f82:	8019      	strh	r1, [r3, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	9e04      	ldr	r6, [sp, #16]
 8002f88:	6123      	str	r3, [r4, #16]
 8002f8a:	e7bb      	b.n	8002f04 <_printf_i+0x128>
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	1d11      	adds	r1, r2, #4
 8002f90:	6019      	str	r1, [r3, #0]
 8002f92:	6816      	ldr	r6, [r2, #0]
 8002f94:	2100      	movs	r1, #0
 8002f96:	0030      	movs	r0, r6
 8002f98:	6862      	ldr	r2, [r4, #4]
 8002f9a:	f000 f831 	bl	8003000 <memchr>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d001      	beq.n	8002fa6 <_printf_i+0x1ca>
 8002fa2:	1b80      	subs	r0, r0, r6
 8002fa4:	6060      	str	r0, [r4, #4]
 8002fa6:	6863      	ldr	r3, [r4, #4]
 8002fa8:	6123      	str	r3, [r4, #16]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9a04      	ldr	r2, [sp, #16]
 8002fae:	7013      	strb	r3, [r2, #0]
 8002fb0:	e7a8      	b.n	8002f04 <_printf_i+0x128>
 8002fb2:	6923      	ldr	r3, [r4, #16]
 8002fb4:	0032      	movs	r2, r6
 8002fb6:	9906      	ldr	r1, [sp, #24]
 8002fb8:	9805      	ldr	r0, [sp, #20]
 8002fba:	9d07      	ldr	r5, [sp, #28]
 8002fbc:	47a8      	blx	r5
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	d0aa      	beq.n	8002f18 <_printf_i+0x13c>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	079b      	lsls	r3, r3, #30
 8002fc6:	d415      	bmi.n	8002ff4 <_printf_i+0x218>
 8002fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fca:	68e0      	ldr	r0, [r4, #12]
 8002fcc:	4298      	cmp	r0, r3
 8002fce:	daa5      	bge.n	8002f1c <_printf_i+0x140>
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	e7a3      	b.n	8002f1c <_printf_i+0x140>
 8002fd4:	0022      	movs	r2, r4
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	9906      	ldr	r1, [sp, #24]
 8002fda:	9805      	ldr	r0, [sp, #20]
 8002fdc:	9e07      	ldr	r6, [sp, #28]
 8002fde:	3219      	adds	r2, #25
 8002fe0:	47b0      	blx	r6
 8002fe2:	1c43      	adds	r3, r0, #1
 8002fe4:	d098      	beq.n	8002f18 <_printf_i+0x13c>
 8002fe6:	3501      	adds	r5, #1
 8002fe8:	68e3      	ldr	r3, [r4, #12]
 8002fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	42ab      	cmp	r3, r5
 8002ff0:	dcf0      	bgt.n	8002fd4 <_printf_i+0x1f8>
 8002ff2:	e7e9      	b.n	8002fc8 <_printf_i+0x1ec>
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	e7f7      	b.n	8002fe8 <_printf_i+0x20c>
 8002ff8:	080033d9 	.word	0x080033d9
 8002ffc:	080033ea 	.word	0x080033ea

08003000 <memchr>:
 8003000:	b2c9      	uxtb	r1, r1
 8003002:	1882      	adds	r2, r0, r2
 8003004:	4290      	cmp	r0, r2
 8003006:	d101      	bne.n	800300c <memchr+0xc>
 8003008:	2000      	movs	r0, #0
 800300a:	4770      	bx	lr
 800300c:	7803      	ldrb	r3, [r0, #0]
 800300e:	428b      	cmp	r3, r1
 8003010:	d0fb      	beq.n	800300a <memchr+0xa>
 8003012:	3001      	adds	r0, #1
 8003014:	e7f6      	b.n	8003004 <memchr+0x4>

08003016 <memcpy>:
 8003016:	2300      	movs	r3, #0
 8003018:	b510      	push	{r4, lr}
 800301a:	429a      	cmp	r2, r3
 800301c:	d100      	bne.n	8003020 <memcpy+0xa>
 800301e:	bd10      	pop	{r4, pc}
 8003020:	5ccc      	ldrb	r4, [r1, r3]
 8003022:	54c4      	strb	r4, [r0, r3]
 8003024:	3301      	adds	r3, #1
 8003026:	e7f8      	b.n	800301a <memcpy+0x4>

08003028 <memmove>:
 8003028:	b510      	push	{r4, lr}
 800302a:	4288      	cmp	r0, r1
 800302c:	d902      	bls.n	8003034 <memmove+0xc>
 800302e:	188b      	adds	r3, r1, r2
 8003030:	4298      	cmp	r0, r3
 8003032:	d303      	bcc.n	800303c <memmove+0x14>
 8003034:	2300      	movs	r3, #0
 8003036:	e007      	b.n	8003048 <memmove+0x20>
 8003038:	5c8b      	ldrb	r3, [r1, r2]
 800303a:	5483      	strb	r3, [r0, r2]
 800303c:	3a01      	subs	r2, #1
 800303e:	d2fb      	bcs.n	8003038 <memmove+0x10>
 8003040:	bd10      	pop	{r4, pc}
 8003042:	5ccc      	ldrb	r4, [r1, r3]
 8003044:	54c4      	strb	r4, [r0, r3]
 8003046:	3301      	adds	r3, #1
 8003048:	429a      	cmp	r2, r3
 800304a:	d1fa      	bne.n	8003042 <memmove+0x1a>
 800304c:	e7f8      	b.n	8003040 <memmove+0x18>
	...

08003050 <_free_r>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	0005      	movs	r5, r0
 8003054:	2900      	cmp	r1, #0
 8003056:	d010      	beq.n	800307a <_free_r+0x2a>
 8003058:	1f0c      	subs	r4, r1, #4
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	da00      	bge.n	8003062 <_free_r+0x12>
 8003060:	18e4      	adds	r4, r4, r3
 8003062:	0028      	movs	r0, r5
 8003064:	f000 f918 	bl	8003298 <__malloc_lock>
 8003068:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <_free_r+0x90>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <_free_r+0x2c>
 8003070:	6063      	str	r3, [r4, #4]
 8003072:	6014      	str	r4, [r2, #0]
 8003074:	0028      	movs	r0, r5
 8003076:	f000 f917 	bl	80032a8 <__malloc_unlock>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	42a3      	cmp	r3, r4
 800307e:	d908      	bls.n	8003092 <_free_r+0x42>
 8003080:	6821      	ldr	r1, [r4, #0]
 8003082:	1860      	adds	r0, r4, r1
 8003084:	4283      	cmp	r3, r0
 8003086:	d1f3      	bne.n	8003070 <_free_r+0x20>
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	1841      	adds	r1, r0, r1
 800308e:	6021      	str	r1, [r4, #0]
 8003090:	e7ee      	b.n	8003070 <_free_r+0x20>
 8003092:	001a      	movs	r2, r3
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <_free_r+0x4e>
 800309a:	42a3      	cmp	r3, r4
 800309c:	d9f9      	bls.n	8003092 <_free_r+0x42>
 800309e:	6811      	ldr	r1, [r2, #0]
 80030a0:	1850      	adds	r0, r2, r1
 80030a2:	42a0      	cmp	r0, r4
 80030a4:	d10b      	bne.n	80030be <_free_r+0x6e>
 80030a6:	6820      	ldr	r0, [r4, #0]
 80030a8:	1809      	adds	r1, r1, r0
 80030aa:	1850      	adds	r0, r2, r1
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	4283      	cmp	r3, r0
 80030b0:	d1e0      	bne.n	8003074 <_free_r+0x24>
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	1841      	adds	r1, r0, r1
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	6053      	str	r3, [r2, #4]
 80030bc:	e7da      	b.n	8003074 <_free_r+0x24>
 80030be:	42a0      	cmp	r0, r4
 80030c0:	d902      	bls.n	80030c8 <_free_r+0x78>
 80030c2:	230c      	movs	r3, #12
 80030c4:	602b      	str	r3, [r5, #0]
 80030c6:	e7d5      	b.n	8003074 <_free_r+0x24>
 80030c8:	6821      	ldr	r1, [r4, #0]
 80030ca:	1860      	adds	r0, r4, r1
 80030cc:	4283      	cmp	r3, r0
 80030ce:	d103      	bne.n	80030d8 <_free_r+0x88>
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	1841      	adds	r1, r0, r1
 80030d6:	6021      	str	r1, [r4, #0]
 80030d8:	6063      	str	r3, [r4, #4]
 80030da:	6054      	str	r4, [r2, #4]
 80030dc:	e7ca      	b.n	8003074 <_free_r+0x24>
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	2000028c 	.word	0x2000028c

080030e4 <sbrk_aligned>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4e0f      	ldr	r6, [pc, #60]	; (8003124 <sbrk_aligned+0x40>)
 80030e8:	000d      	movs	r5, r1
 80030ea:	6831      	ldr	r1, [r6, #0]
 80030ec:	0004      	movs	r4, r0
 80030ee:	2900      	cmp	r1, #0
 80030f0:	d102      	bne.n	80030f8 <sbrk_aligned+0x14>
 80030f2:	f000 f8bf 	bl	8003274 <_sbrk_r>
 80030f6:	6030      	str	r0, [r6, #0]
 80030f8:	0029      	movs	r1, r5
 80030fa:	0020      	movs	r0, r4
 80030fc:	f000 f8ba 	bl	8003274 <_sbrk_r>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d00a      	beq.n	800311a <sbrk_aligned+0x36>
 8003104:	2303      	movs	r3, #3
 8003106:	1cc5      	adds	r5, r0, #3
 8003108:	439d      	bics	r5, r3
 800310a:	42a8      	cmp	r0, r5
 800310c:	d007      	beq.n	800311e <sbrk_aligned+0x3a>
 800310e:	1a29      	subs	r1, r5, r0
 8003110:	0020      	movs	r0, r4
 8003112:	f000 f8af 	bl	8003274 <_sbrk_r>
 8003116:	1c43      	adds	r3, r0, #1
 8003118:	d101      	bne.n	800311e <sbrk_aligned+0x3a>
 800311a:	2501      	movs	r5, #1
 800311c:	426d      	negs	r5, r5
 800311e:	0028      	movs	r0, r5
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000290 	.word	0x20000290

08003128 <_malloc_r>:
 8003128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800312a:	2203      	movs	r2, #3
 800312c:	1ccb      	adds	r3, r1, #3
 800312e:	4393      	bics	r3, r2
 8003130:	3308      	adds	r3, #8
 8003132:	0006      	movs	r6, r0
 8003134:	001f      	movs	r7, r3
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d232      	bcs.n	80031a0 <_malloc_r+0x78>
 800313a:	270c      	movs	r7, #12
 800313c:	42b9      	cmp	r1, r7
 800313e:	d831      	bhi.n	80031a4 <_malloc_r+0x7c>
 8003140:	0030      	movs	r0, r6
 8003142:	f000 f8a9 	bl	8003298 <__malloc_lock>
 8003146:	4d32      	ldr	r5, [pc, #200]	; (8003210 <_malloc_r+0xe8>)
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	001c      	movs	r4, r3
 800314c:	2c00      	cmp	r4, #0
 800314e:	d12e      	bne.n	80031ae <_malloc_r+0x86>
 8003150:	0039      	movs	r1, r7
 8003152:	0030      	movs	r0, r6
 8003154:	f7ff ffc6 	bl	80030e4 <sbrk_aligned>
 8003158:	0004      	movs	r4, r0
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	d11e      	bne.n	800319c <_malloc_r+0x74>
 800315e:	682c      	ldr	r4, [r5, #0]
 8003160:	0025      	movs	r5, r4
 8003162:	2d00      	cmp	r5, #0
 8003164:	d14a      	bne.n	80031fc <_malloc_r+0xd4>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	0029      	movs	r1, r5
 800316a:	18e3      	adds	r3, r4, r3
 800316c:	0030      	movs	r0, r6
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	f000 f880 	bl	8003274 <_sbrk_r>
 8003174:	9b01      	ldr	r3, [sp, #4]
 8003176:	4283      	cmp	r3, r0
 8003178:	d143      	bne.n	8003202 <_malloc_r+0xda>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	3703      	adds	r7, #3
 800317e:	1aff      	subs	r7, r7, r3
 8003180:	2303      	movs	r3, #3
 8003182:	439f      	bics	r7, r3
 8003184:	3708      	adds	r7, #8
 8003186:	2f0c      	cmp	r7, #12
 8003188:	d200      	bcs.n	800318c <_malloc_r+0x64>
 800318a:	270c      	movs	r7, #12
 800318c:	0039      	movs	r1, r7
 800318e:	0030      	movs	r0, r6
 8003190:	f7ff ffa8 	bl	80030e4 <sbrk_aligned>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d034      	beq.n	8003202 <_malloc_r+0xda>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	19df      	adds	r7, r3, r7
 800319c:	6027      	str	r7, [r4, #0]
 800319e:	e013      	b.n	80031c8 <_malloc_r+0xa0>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	dacb      	bge.n	800313c <_malloc_r+0x14>
 80031a4:	230c      	movs	r3, #12
 80031a6:	2500      	movs	r5, #0
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	0028      	movs	r0, r5
 80031ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	1bd1      	subs	r1, r2, r7
 80031b2:	d420      	bmi.n	80031f6 <_malloc_r+0xce>
 80031b4:	290b      	cmp	r1, #11
 80031b6:	d917      	bls.n	80031e8 <_malloc_r+0xc0>
 80031b8:	19e2      	adds	r2, r4, r7
 80031ba:	6027      	str	r7, [r4, #0]
 80031bc:	42a3      	cmp	r3, r4
 80031be:	d111      	bne.n	80031e4 <_malloc_r+0xbc>
 80031c0:	602a      	str	r2, [r5, #0]
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	6053      	str	r3, [r2, #4]
 80031c8:	0030      	movs	r0, r6
 80031ca:	0025      	movs	r5, r4
 80031cc:	f000 f86c 	bl	80032a8 <__malloc_unlock>
 80031d0:	2207      	movs	r2, #7
 80031d2:	350b      	adds	r5, #11
 80031d4:	1d23      	adds	r3, r4, #4
 80031d6:	4395      	bics	r5, r2
 80031d8:	1aea      	subs	r2, r5, r3
 80031da:	429d      	cmp	r5, r3
 80031dc:	d0e5      	beq.n	80031aa <_malloc_r+0x82>
 80031de:	1b5b      	subs	r3, r3, r5
 80031e0:	50a3      	str	r3, [r4, r2]
 80031e2:	e7e2      	b.n	80031aa <_malloc_r+0x82>
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e7ec      	b.n	80031c2 <_malloc_r+0x9a>
 80031e8:	6862      	ldr	r2, [r4, #4]
 80031ea:	42a3      	cmp	r3, r4
 80031ec:	d101      	bne.n	80031f2 <_malloc_r+0xca>
 80031ee:	602a      	str	r2, [r5, #0]
 80031f0:	e7ea      	b.n	80031c8 <_malloc_r+0xa0>
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	e7e8      	b.n	80031c8 <_malloc_r+0xa0>
 80031f6:	0023      	movs	r3, r4
 80031f8:	6864      	ldr	r4, [r4, #4]
 80031fa:	e7a7      	b.n	800314c <_malloc_r+0x24>
 80031fc:	002c      	movs	r4, r5
 80031fe:	686d      	ldr	r5, [r5, #4]
 8003200:	e7af      	b.n	8003162 <_malloc_r+0x3a>
 8003202:	230c      	movs	r3, #12
 8003204:	0030      	movs	r0, r6
 8003206:	6033      	str	r3, [r6, #0]
 8003208:	f000 f84e 	bl	80032a8 <__malloc_unlock>
 800320c:	e7cd      	b.n	80031aa <_malloc_r+0x82>
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	2000028c 	.word	0x2000028c

08003214 <_realloc_r>:
 8003214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003216:	0007      	movs	r7, r0
 8003218:	000e      	movs	r6, r1
 800321a:	0014      	movs	r4, r2
 800321c:	2900      	cmp	r1, #0
 800321e:	d105      	bne.n	800322c <_realloc_r+0x18>
 8003220:	0011      	movs	r1, r2
 8003222:	f7ff ff81 	bl	8003128 <_malloc_r>
 8003226:	0005      	movs	r5, r0
 8003228:	0028      	movs	r0, r5
 800322a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800322c:	2a00      	cmp	r2, #0
 800322e:	d103      	bne.n	8003238 <_realloc_r+0x24>
 8003230:	f7ff ff0e 	bl	8003050 <_free_r>
 8003234:	0025      	movs	r5, r4
 8003236:	e7f7      	b.n	8003228 <_realloc_r+0x14>
 8003238:	f000 f83e 	bl	80032b8 <_malloc_usable_size_r>
 800323c:	9001      	str	r0, [sp, #4]
 800323e:	4284      	cmp	r4, r0
 8003240:	d803      	bhi.n	800324a <_realloc_r+0x36>
 8003242:	0035      	movs	r5, r6
 8003244:	0843      	lsrs	r3, r0, #1
 8003246:	42a3      	cmp	r3, r4
 8003248:	d3ee      	bcc.n	8003228 <_realloc_r+0x14>
 800324a:	0021      	movs	r1, r4
 800324c:	0038      	movs	r0, r7
 800324e:	f7ff ff6b 	bl	8003128 <_malloc_r>
 8003252:	1e05      	subs	r5, r0, #0
 8003254:	d0e8      	beq.n	8003228 <_realloc_r+0x14>
 8003256:	9b01      	ldr	r3, [sp, #4]
 8003258:	0022      	movs	r2, r4
 800325a:	429c      	cmp	r4, r3
 800325c:	d900      	bls.n	8003260 <_realloc_r+0x4c>
 800325e:	001a      	movs	r2, r3
 8003260:	0031      	movs	r1, r6
 8003262:	0028      	movs	r0, r5
 8003264:	f7ff fed7 	bl	8003016 <memcpy>
 8003268:	0031      	movs	r1, r6
 800326a:	0038      	movs	r0, r7
 800326c:	f7ff fef0 	bl	8003050 <_free_r>
 8003270:	e7da      	b.n	8003228 <_realloc_r+0x14>
	...

08003274 <_sbrk_r>:
 8003274:	2300      	movs	r3, #0
 8003276:	b570      	push	{r4, r5, r6, lr}
 8003278:	4d06      	ldr	r5, [pc, #24]	; (8003294 <_sbrk_r+0x20>)
 800327a:	0004      	movs	r4, r0
 800327c:	0008      	movs	r0, r1
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	f7fd fcf2 	bl	8000c68 <_sbrk>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d103      	bne.n	8003290 <_sbrk_r+0x1c>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d000      	beq.n	8003290 <_sbrk_r+0x1c>
 800328e:	6023      	str	r3, [r4, #0]
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	20000294 	.word	0x20000294

08003298 <__malloc_lock>:
 8003298:	b510      	push	{r4, lr}
 800329a:	4802      	ldr	r0, [pc, #8]	; (80032a4 <__malloc_lock+0xc>)
 800329c:	f000 f814 	bl	80032c8 <__retarget_lock_acquire_recursive>
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	20000298 	.word	0x20000298

080032a8 <__malloc_unlock>:
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4802      	ldr	r0, [pc, #8]	; (80032b4 <__malloc_unlock+0xc>)
 80032ac:	f000 f80d 	bl	80032ca <__retarget_lock_release_recursive>
 80032b0:	bd10      	pop	{r4, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	20000298 	.word	0x20000298

080032b8 <_malloc_usable_size_r>:
 80032b8:	1f0b      	subs	r3, r1, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1f18      	subs	r0, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	da01      	bge.n	80032c6 <_malloc_usable_size_r+0xe>
 80032c2:	580b      	ldr	r3, [r1, r0]
 80032c4:	18c0      	adds	r0, r0, r3
 80032c6:	4770      	bx	lr

080032c8 <__retarget_lock_acquire_recursive>:
 80032c8:	4770      	bx	lr

080032ca <__retarget_lock_release_recursive>:
 80032ca:	4770      	bx	lr

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
